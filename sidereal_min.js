"use strict";
var date1,date2;var place1,place2;var long1,long2;var lat1,lat2;var rotate1=0,rotate2=0;var tz1,tz2;var tipsEnabled,tips,highPrecCalInTips;var starsLoc=[],brightestStarsLoc=[],conLabelLoc=[];starsLoc[0]=brightStars();starsLoc[1]=brightStars();brightestStarsLoc[0]=brightestStars();brightestStarsLoc[1]=brightestStars();conLabelLoc[0]=constellationLabel();conLabelLoc[1]=constellationLabel();var magLimit=5.3;var magLimitTip=5.3;var milkyLoc=[];milkyLoc[0]={northernEdge:northernEdge(),southernEdge:southernEdge(),betaCas:betaCas(),thetaOph:thetaOph(),lambdaSco:lambdaSco(),coalsack:coalsack()};milkyLoc[1]={northernEdge:northernEdge(),southernEdge:southernEdge(),betaCas:betaCas(),thetaOph:thetaOph(),lambdaSco:lambdaSco(),coalsack:coalsack()};function init(){var iplookup=false;if(iplookup){$.ajax({url:"http://ip-api.com/json",success:function(res){var place=res.city;if(res.region!=""){place+=", "+res.region}place+=", "+res.countryCode;$("#place1").text(place);$("#long1").text(res.lon);$("#lat1").text(res.lat)},timeout:1e3,complete:init_cont})}else{init_cont()}}function init_cont(){var d=new Date;var tmp1=$("#long1").text();var tmp2=$("#lat1").text();if(tmp1!=""&&tmp2!=""){place1=$("#place1").text();long1=parseFloat(tmp1);lat1=parseFloat(tmp2)}else{place1="Champaign, IL, USA";long1=-88.2434;lat1=40.1164}var tz1String="GMT";var tz1offset=d.getTimezoneOffset();var tString=d.toTimeString();var i=tString.indexOf("GMT");if(i!=-1){tz1String=tString.slice(i+3)}tz1={tz:tz1offset,tzString:tz1String};place2="";long2=long1;lat2=-30;if(lat1<0){lat2=30}tz2={tz:tz1.tz,tzString:tz1.tzString};var yyyy=d.getFullYear();var mm=d.getMonth()+1;var dd=d.getDate();var h=d.getHours();var m=d.getMinutes();var s=d.getSeconds()+.001*d.getMilliseconds();var dateString=generateDateString(yyyy,mm,dd);var timeString=generateTimeString(h,m,s);var D=getDm(yyyy,mm,dd,tz1.tz)+(h+m/60+s/3600)/24;var T=D/36525;var dT=DeltaT(T);date1={yyyy:yyyy,mm:mm,dd:dd,h:h,m:m,s:s,tz:tz1.tz,tzString:tz1.tzString,dateString:dateString,timeString:timeString,D:D,T:T,dT:dT};var GMST=getGMST(date1);var LST=getSidereal(GMST,long1);date1.LST=LST.hour;date1.LST_rad=LST.rad;date1.LSTstring=LST.string;h+=(tz1.tz-tz2.tz)/60;var hour=h+m/60+s/3600;hour-=24*Math.floor(h/24);var date=CalDat(D+tz2.tz/1440);h=Math.floor(hour);m=Math.floor((hour-h)*60);s=3600*(hour-h-m/60);timeString=generateTimeString(h,m,s);date2={yyyy:date.yy,mm:date.mm,dd:date.dd,h:h,m:m,s:s,tz:tz2.tz,tzString:tz2.tzString,dateString:date.dateString,timeString:timeString,D:D,T:T,dT:dT};GMST=getGMST(date2);LST=getSidereal(GMST,long2);date2.LST=LST.hour;date2.LST_rad=LST.rad;date2.LSTstring=LST.string;tipsEnabled=true;tips=[[],[]];highPrecCalInTips=true;$("#loc1").on("click",function(event){displayPopup(event,1)});$("#loc2").on("click",function(event){displayPopup(event,2)});$("#rotate1").val(rotate1*180/Math.PI);$("#rotate2").val(rotate1*180/Math.PI);starChart()}function displayChangeLocs(){$("button.menu").attr("disabled",true);$("#inputlocs").slideDown();$("#geolocmessage").empty();$("#geolocerr").empty();$("#place1in").val(place1);$("#long1in").val(long1);$("#lat1in").val(lat1);$("#year1in").val(date1.yyyy);$("#month1in").val(date1.mm);$("#day1in").val(date1.dd);$("#hour1in").val(date1.h);$("#minute1in").val(date1.m);$("#second1in").val(date1.s.toFixed(3));$("#tz1in").val(-tz1.tz/60);$("#place2in").val(place2);$("#long2in").val(long2);$("#lat2in").val(lat2);$("#year2in").val(date2.yyyy);$("#month2in").val(date2.mm);$("#day2in").val(date2.dd);$("#hour2in").val(date2.h);$("#minute2in").val(date2.m);$("#second2in").val(date2.s.toFixed(3));$("#tz2in").val(-tz2.tz/60);$("#synTimeYes").prop("checked",true);$("#synTimeNo").prop("checked",false);$(".timeInputLoc2").hide()}function geoloc(){$("#geolocmessage").append("Please wait...");if("geolocation"in navigator){navigator.geolocation.getCurrentPosition(function success(position){var long=position.coords.longitude;var lat=position.coords.latitude;$("#place1in").val("");$("#long1in").val(long);$("#lat1in").val(lat);$("#geolocmessage").empty();var txt="Success! Longitude and latitude have been entered.";$("#geolocmessage").append(txt)},function error(error_message){ipLookUp()})}else{ipLookUp()}}function ipLookUp(){$.ajax({url:"http://ip-api.com/json",success:function(res){var place=res.city;if(res.region!=""){place+=", "+res.region}place+=", "+res.countryCode;$("#place1in").text(place);$("#long1in").text(res.lon);$("#lat1in").text(res.lat);$("#geolocmessage").empty();var txt="Success! Longitude and latitude have been entered.";$("#geolocmessage").append(txt)},timeout:1e3,error:function(xhr,status,error){$("#geolocmessage").empty();var txt="Unable to determine your location by GPS or IP address!";$("#geolocerr").append(txt)}})}function changeSyncTime(i,idHead){var yesID="#"+idHead+"Yes";var noID="#"+idHead+"No";if(i==0){$(yesID).prop("checked",false);$(noID).prop("checked",true);$(".timeInputLoc2").show()}else{$(yesID).prop("checked",true);$(noID).prop("checked",false);$(".timeInputLoc2").hide()}}function changeLocationsAndTimes(form){place1=form.place1in.value;long1=parseFloat(form.long1in.value);lat1=parseFloat(form.lat1in.value);var tzoffset1=parseFloat(form.tz1in.value);tz1.tz=-tzoffset1*60;var tzof=Math.abs(tzoffset1)+.5/60;if(tzoffset1>=0){tz1.tzString="+"}else{tz1.tzString="-"}var hs=Math.floor(tzof).toString();if(hs.length<2){hs="0"+hs}var ms=Math.floor(60*(tzof-Math.floor(tzof))).toString();if(ms.length<2){ms="0"+ms}tz1.tzString+=hs+ms;var yy1=parseInt(form.year1in.value);var mm1=parseInt(form.month1in.value);var dd1=parseInt(form.day1in.value);var h1=parseInt(form.hour1in.value);var m1=parseInt(form.minute1in.value);var s1=parseFloat(form.second1in.value);place2=form.place2in.value;long2=parseFloat(form.long2in.value);lat2=parseFloat(form.lat2in.value);var tzoffset2=parseFloat(form.tz2in.value);tz2.tz=-tzoffset2*60;tzof=Math.abs(tzoffset2)+.5/60;if(tzoffset2>=0){tz2.tzString="+"}else{tz2.tzString="-"}hs=Math.floor(tzof).toString();if(hs.length<2){hs="0"+hs}ms=Math.floor(60*(tzof-Math.floor(tzof))).toString();if(ms.length<2){ms="0"+ms}tz2.tzString+=hs+ms;var sync=document.getElementById("synTimeYes").checked;var yy2,mm2,dd2,h2,m2,s2;if(sync){yy2=yy1;mm2=mm1;dd2=dd1;h2=h1;m2=m1;s2=s1}else{yy2=parseInt(form.year2in.value);mm2=parseInt(form.month2in.value);dd2=parseInt(form.day2in.value);h2=parseInt(form.hour2in.value);m2=parseInt(form.minute2in.value);s2=parseFloat(form.second2in.value)}var errid="#errorlocs";$(errid).empty();var min=-180,max=180;var message="Invalid longitude! Longitude must be a number between -180 and 180. West of Greenwich is negative; east of Greenwich is positive.";sanityCheck(long1,"#long1in",min,max,message,errid);sanityCheck(long2,"#long2in",min,max,message,errid);min=-90;max=90;message="Invalid latitude! Latitude must be a number between -90 and 90, positive in the northern hemisphere and negative in the southern hemisphere.";sanityCheck(lat1,"#lat1in",min,max,message,errid);sanityCheck(lat2,"#lat2in",min,max,message,errid);min=-2e5;max=2e5;message="Invalid year! Please enter an integer between "+min+" and "+max+". Note that 0 means 1 BCE, -1 means 2 BCE and so on. Warning: positions of the Sun, Moon and planets are not accurate outside the years between -3000 and 3000.";sanityCheck(yy1,"#year1in",min,max,message,errid);if(!sync){sanityCheck(yy2,"#year2in",min,max,message,errid)}min=1;max=12;message="Invalid month! Month must be an integer between 1 and 12.";sanityCheck(mm1,"#month1in",min,max,message,errid);if(!sync){sanityCheck(mm2,"#month2in",min,max,message,errid)}min=1;max=31;message="Invalid day! Day must be an integer between 1 and 31.";sanityCheck(dd1,"#day1in",min,max,message,errid);if(!sync){sanityCheck(dd2,"#day2in",min,max,message,errid)}min=0;max=23;message="Invalid hour! Hour must be an integer between 0 and 23.";sanityCheck(h1,"#hour1in",min,max,message,errid);if(!sync){sanityCheck(h2,"#hour2in",min,max,message,errid)}min=0;max=59;message="Invalid minute! Minute must be an integer between 0 and 59.";sanityCheck(m1,"#minute1in",min,max,message,errid);if(!sync){sanityCheck(m2,"#minute2in",min,max,message,errid)}min=0;max=60;message="Invalid second! Second must be a number between 0 and 60.";sanityCheck(s1,"#second1in",min,max,message,errid);if(!sync){sanityCheck(s2,"#second2in",min,max,message,errid)}min=-12;max=14;message="Invalid time zone! Time zone must be a number between -12 and 14.";sanityCheck(tzoffset1,"#tz1in",min,max,message,errid);sanityCheck(tzoffset2,"#tz2in",min,max,message,errid);if($(errid).text()==""){$("#inputlocs").slideUp();$("button.menu").attr("disabled",false);var D=getDm(yy1,mm1,dd1,0);var date=CalDat(D);yy1=date.yy;mm1=date.mm;dd1=date.dd;var dateString=date.dateString;var timeString=generateTimeString(h1,m1,s1);D=getDm(yy1,mm1,dd1,tz1.tz)+(h1+m1/60+s1/3600)/24;var T=D/36525;var dT=DeltaT(T);date1={yyyy:yy1,mm:mm1,dd:dd1,h:h1,m:m1,s:s1,tz:tz1.tz,tzString:tz1.tzString,dateString:dateString,timeString:timeString,D:D,T:T,dT:dT};var GMST=getGMST(date1);var LST=getSidereal(GMST,long1);date1.LST=LST.hour;date1.LST_rad=LST.rad;date1.LSTstring=LST.string;D=getDm(yy2,mm2,dd2,0);date=CalDat(D);yy2=date.yy;mm2=date.mm;dd2=date.dd;dateString=date.dateString;timeString=generateTimeString(h2,m2,s2);D=getDm(yy2,mm2,dd2,tz2.tz)+(h2+m2/60+s2/3600)/24;T=D/36525;dT=DeltaT(T);date2={yyyy:yy2,mm:mm2,dd:dd2,h:h2,m:m2,s:s2,tz:tz2.tz,tzString:tz1.tzString,dateString:dateString,timeString:timeString,D:D,T:T,dT:dT};GMST=getGMST(date2);LST=getSidereal(GMST,long2);date2.LST=LST.hour;date2.LST_rad=LST.rad;date2.LSTstring=LST.string;starChart()}}function showHide(loc,name){var locStr=loc.toString();$("#show"+name+locStr).toggleClass("active");starChartLoc(loc)}function rotInput(loc){var locStr=loc.toString();var inputId="#rotate"+locStr;var errid="#errRotate"+locStr;$(errid).empty();var x=parseInt($(inputId).val());var message="Invalid input! Please enter an integer.";$(inputId).css("background-color","transparent");if(isNaN(x)){$(inputId).css("background-color","#e2a8a8");var text='<p style="color:red;">'+message+"</p>";$(errid).append(text)}if($(errid).text()==""){x=x-360*Math.floor(x/360);$(inputId).val(x);if(loc==1){rotate1=x*Math.PI/180}else{rotate2=x*Math.PI/180}starChartLoc(loc)}}function getGMST(d){var D0=Math.floor(d.D-.5)+.5;var H=d.h+d.m/60+d.s/3600+d.tz/60;H-=24*Math.floor(H/24);var GMST=.06570748587250752*D0;GMST-=24*Math.floor(GMST/24);GMST+=6.697374558336001+1.0027378119113546*H;GMST-=24*Math.floor(GMST/24);var T=d.T+d.dT;GMST+=2.686296296296296e-7+T*(.08541030618518518+T*2577003148148148e-20);GMST-=24*Math.floor(GMST/24);return GMST}function getSidereal(GMST,long){var LST=GMST+long/15;LST=LST-24*Math.floor(LST/24);var LST_rad=LST*Math.PI/12;var LSTr=LST+.5/3600;var LSTH=Math.floor(LSTr).toString();var LSTM=Math.floor(60*(LSTr-LSTH)).toString();var LSTS=Math.floor(3600*(LSTr-LSTH-LSTM/60)).toString();if(LSTH.length<2){LSTH="0"+LSTH}if(LSTM.length<2){LSTM="0"+LSTM}if(LSTS.length<2){LSTS="0"+LSTS}var LST_string=LSTH+":"+LSTM+":"+LSTS;return{hour:LST,rad:LST_rad,string:LST_string}}function starChart(){var d1String=date1.dateString+"&nbsp;&nbsp;"+date1.timeString+"  GMT"+tz1.tzString;var d2String=date2.dateString+"&nbsp;&nbsp;"+date2.timeString+" GMT"+tz2.tzString;$("#place1").text(place1);$("#long1").html(long1+"&deg;");$("#lat1").html(lat1+"&deg;");$("#time1").html(d1String);$("#siderealTime1").text(date1.LSTstring);$("#place2").text(place2);$("#long2").html(long2+"&deg;");$("#lat2").html(lat2+"&deg;");$("#time2").html(d2String);$("#siderealTime2").text(date2.LSTstring);var pDraw=setupDrawingParameters();starChartLoc(1);starChartLoc(2);addLegend(pDraw)}function starChartLoc(loc){var d,lat,T0;if(loc==1){d=date1;lat=lat1}else{d=date2;lat=lat2}var lat_rad=lat*Math.PI/180;var locStr=loc.toString();var Canvas=document.getElementById("loc"+locStr);if(Math.abs(d.yyyy)>3e3&&$("#warning"+locStr).text()==""){$("#warning"+locStr).append('<p style="color:red;">Warning: Positions of the Sun, Moon and planets are not accurate at this time.</p>')}if(Math.abs(d.yyyy)<3e3&&$("#warning"+locStr).text()!=""){$("#warning"+locStr).empty()}var T=d.T,TD=d.T+d.dT;var pDraw=setupDrawingParameters();pDraw.loc=loc;pDraw.rotate=rotate1;if(loc==2){pDraw.rotate=rotate2}pDraw.cosRotAng=Math.cos(pDraw.rotate);pDraw.sinRotAng=Math.sin(pDraw.rotate);var objects={milky:{}};pDraw.showPlanets=$("#showPlanets"+locStr).hasClass("active");pDraw.showEquator=$("#showEquator"+locStr).hasClass("active");pDraw.showEcliptic=$("#showEcliptic"+locStr).hasClass("active");pDraw.showMilkyWay=$("#showMilkyWay"+locStr).hasClass("active");pDraw.showConLines=$("#showConLines"+locStr).hasClass("active");pDraw.showConLab=$("#showConLab"+locStr).hasClass("active");pDraw.showDayNight=$("#showDayNight"+locStr).hasClass("active");if(pDraw.showEcliptic){if(Math.abs(TD)<1){pDraw.eclipticNorthPoleDec=1.16170371649804}else{pDraw.eclipticNorthPoleDec=.5*Math.PI-epsA(TD)}}if(pDraw.showMilkyWay){objects.milky.north=milkyLoc[loc-1].northernEdge;objects.milky.south=milkyLoc[loc-1].southernEdge;objects.milky.betaCas=milkyLoc[loc-1].betaCas;objects.milky.thetaOph=milkyLoc[loc-1].thetaOph;objects.milky.lambdaSco=milkyLoc[loc-1].lambdaSco;objects.milky.coalsack=milkyLoc[loc-1].coalsack;T0=objects.milky.north[0].Tepoch;if(Math.abs(TD-T0)>.1){milkyWayBoundaryPrecession(objects.milky,T0,TD)}var raDec=galacticNorthPole(TD);pDraw.galPoleRa=raDec.ra;pDraw.galPoleDec=raDec.dec}objects.conLines=constellationLines();if(pDraw.showConLab){objects.conLab=conLabelLoc[loc-1];T0=objects.conLab[0].Tepoch;if(Math.abs(TD-T0)>.1){var p=precession_matrix(T0,TD-T0);addPrecession(objects.conLab,p,TD);for(var i=1;i<objects.conLab.length;i++){if("ra2"in objects.conLab[i]){var precessed=precessed_ra_dec(objects.conLab[i].ra2,objects.conLab[i].dec2,p);objects.conLab[i].ra2=precessed.ra;objects.conLab[i].dec2=precessed.dec}}}}objects.stars=starsLoc[loc-1];T0=objects.stars[0].Tepoch;if(Math.abs(TD-T0)>.1){recomputeStarPos(TD,objects.stars)}if(pDraw.showPlanets){objects.planets=sunMoonPlanets(TD)}else{objects.planets=[];objects.planets[0]=MiniSun(TD)}drawStarsPlanets(Canvas,objects,pDraw,d.LST_rad,lat_rad)}function drawStarsPlanets(Canvas,objects,pDraw,LST,lat){var Ctx=Canvas.getContext("2d");Ctx.clearRect(0,0,Canvas.width,Canvas.height);var cosLat=Math.cos(lat),sinLat=Math.sin(lat);var halfPI=.5*Math.PI;var twoPI=2*Math.PI;var r=.47*Math.max(Canvas.width,Canvas.height);var xc=.5*Canvas.width;var yc=.5*Canvas.height;var raDec={ra:objects.planets[0].ra,dec:objects.planets[0].dec};var hor=ra_dec_to_alt_az(raDec,LST,cosLat,sinLat);var altSun=hor.alt*180/Math.PI;Ctx.beginPath();Ctx.setLineDash([]);Ctx.arc(xc,yc,r,0,2*Math.PI);var b=255,b1=255;if(pDraw.showDayNight){b=Math.round(255*(1+altSun/18));b=Math.min(b,255);b=Math.max(0,b);b1=Math.round(b*.95)}Ctx.fillStyle="rgb("+b1+","+b1+","+b+")";Ctx.fill();Ctx.strokeStyle="black";Ctx.stroke();var gpara={halfPI:halfPI,xc:xc,yc:yc,r:r,r2:r*r,altSun:altSun,rotate:pDraw.rotate,cosRotAng:pDraw.cosRotAng,sinRotAng:pDraw.sinRotAng};drawAzimuthLabels(Ctx,gpara);var pole;if(pDraw.showEquator){var eqColor="black";if(b<170){eqColor="yellow"}pole={ra:0,dec:halfPI,linestyle:[],color:eqColor};drawCircle(Ctx,LST,cosLat,sinLat,pole,gpara)}if(pDraw.showEcliptic){var ecColor="brown";if(b<170){ecColor="yellow"}pole={ra:-.5*Math.PI,dec:pDraw.eclipticNorthPoleDec,linestyle:[10,15],color:ecColor};drawCircle(Ctx,LST,cosLat,sinLat,pole,gpara)}if(pDraw.showMilkyWay){drawMilkyWay(Ctx,LST,objects.milky,cosLat,sinLat,gpara,pDraw);pole={ra:pDraw.galPoleRa,dec:pDraw.galPoleDec,linestyle:[14,15],color:"magenta"};drawCircle(Ctx,LST,cosLat,sinLat,pole,gpara)}var newStar;if(pDraw.showConLines||tipsEnabled){if(tipsEnabled){newStar=new Array(objects.stars.length);newStar.fill(true);tips[pDraw.loc-1].length=0}drawConstellationLinesAndSetupTips(Ctx,objects.conLines,objects.stars,LST,cosLat,sinLat,gpara,pDraw,newStar)}var i,x,y,s;var coord;var n=objects.stars.length;if(b<170){Ctx.fillStyle="white"}else{Ctx.fillStyle="black"}for(i=1;i<n;i++){if(objects.stars[i].mag>magLimit){continue}coord=ra_dec_to_xy_above(objects.stars[i],LST,cosLat,sinLat,gpara);if(coord.x>-998){s=pDraw.starMagA*objects.stars[i].mag+pDraw.starMagB;s=Math.max(s,1);Ctx.beginPath();Ctx.arc(coord.x,coord.y,s,0,twoPI);Ctx.fill();if(tipsEnabled){if(objects.stars[i].mag<magLimitTip&&newStar[i]){newStar[i]=false;s=Math.max(s,3);tips[pDraw.loc-1].push({x:coord.x,y:coord.y,r2:s*s,object:"star",starInd:i})}}}}if(tipsEnabled){newStar.length=0}if(pDraw.showPlanets){Ctx.font="20px Arial";for(i=0;i<9;i++){raDec={ra:objects.planets[i].ra,dec:objects.planets[i].dec};if(i==1){var topo=topoCentricEquatorial(objects.planets[i].rGeo,raDec.ra,raDec.dec,LST,sinLat,cosLat);raDec={ra:topo.raTopo,dec:topo.decTopo}}coord=ra_dec_to_xy_above(raDec,LST,cosLat,sinLat,gpara);if(coord.x>-998){x=coord.x;y=coord.y;var pSymbol=String.fromCharCode(pDraw.code[i]);Ctx.fillStyle=pDraw.color[i];Ctx.fillText(pSymbol,x+pDraw.offset[i].x,y+pDraw.offset[i].y);Ctx.beginPath();Ctx.arc(x,y,pDraw.size[i],0,twoPI);Ctx.fill();if(tipsEnabled){s=.5*Ctx.measureText(pSymbol).width;s=Math.max(s,10);tips[pDraw.loc-1].push({x:x+pDraw.offset[i].x+s,y:y+pDraw.offset[i].y-10,r2:s*s,object:pDraw.pName[i],pIndex:i})}}}}if(pDraw.showConLab){drawConstellationLabel(Ctx,objects.conLab,LST,cosLat,sinLat,gpara,pDraw)}}function drawAzimuthLabels(Ctx,gpara){var dA=10;var n=360/dA;var dArad=dA*Math.PI/180;var rotateDeg=gpara.rotate*180/Math.PI;Ctx.font="15px Arial";Ctx.txtAlign="center";Ctx.fillStyle="black";for(var i=0;i<n;i++){var Adeg=i*dA-rotateDeg;Adeg-=360*Math.floor(Adeg/360);var A=i*dArad-gpara.rotate;var cosA=Math.cos(A),sinA=Math.sin(A);var x1=gpara.xc-gpara.r*sinA;var y1=gpara.yc-gpara.r*cosA;var x2=gpara.xc-1.02*gpara.r*sinA;var y2=gpara.yc-1.02*gpara.r*cosA;var x3,y3;if(Adeg<90||Adeg>270){x3=gpara.xc-1.03*gpara.r*sinA;y3=gpara.yc-1.03*gpara.r*cosA}else{x3=gpara.xc-1.06*gpara.r*sinA;y3=gpara.yc-1.06*gpara.r*cosA}Ctx.beginPath();Ctx.moveTo(x1,y1);Ctx.lineTo(x2,y2);Ctx.stroke();var Achar=i*dA;var txt=Achar+String.fromCharCode(176);if(Achar==0){txt="N"}else if(Achar==90){txt="E"}else if(Achar==180){txt="S"}else if(Achar==270){txt="W"}Ctx.save();Ctx.translate(x3,y3);if(Adeg<90||Adeg>270){Ctx.rotate(-A)}else{Ctx.rotate(Math.PI-A)}var w=Ctx.measureText(txt).width;Ctx.fillText(txt,-w*.5,0);Ctx.restore()}Ctx.txtAlign="start"}function ra_dec_to_alt_az(raDec,LST,cosLat,sinLat){var HA=LST-raDec.ra;var cosHA=Math.cos(HA),sinHA=Math.sin(HA);var cosDec=Math.cos(raDec.dec),sinDec=Math.sin(raDec.dec);var alt=sinDec*sinLat+cosLat*cosDec*cosHA;alt=Math.asin(alt);var cosAlt=Math.cos(alt);var sA=cosDec*sinHA/cosAlt;var cA=(cosDec*cosHA*sinLat-sinDec*cosLat)/cosAlt;if(Math.abs(cosAlt)<1e-10){sA=0;cA=1}return{alt:alt,cosA:cA,sinA:sA}}function atmosphericRefraction(alt,P,T){var frac=2.80198*P/T;var x=alt+.003137559423803098/(alt+.08918632477691024);return.000296705972839036*frac/Math.tan(x)}function ra_dec_to_xy_above(raDec,LST,cosLat,sinLat,gpara){var HA=LST-raDec.ra;var cosHA=Math.cos(HA),sinHA=Math.sin(HA);var cosDec=Math.cos(raDec.dec),sinDec=Math.sin(raDec.dec);var alt=sinDec*sinLat+cosLat*cosDec*cosHA;alt=Math.asin(alt);var cosAlt=Math.cos(alt);var sinA=cosDec*sinHA/cosAlt;var cosA=(cosDec*cosHA*sinLat-sinDec*cosLat)/cosAlt;var sA=sinA*gpara.cosRotAng-cosA*gpara.sinRotAng;var cA=cosA*gpara.cosRotAng+sinA*gpara.sinRotAng;if(Math.abs(cosAlt)<1e-10){sA=0;cA=1}if(alt>-.0175){alt+=atmosphericRefraction(alt,101,286)}var x,y;if(alt>=0){var rc=gpara.r*Math.tan(.5*(gpara.halfPI-alt));x=gpara.xc+rc*sA;y=gpara.yc+rc*cA}else{x=-999;y=-999}return{x:x,y:y}}function ra_dec_to_xy(raDec,LST,cosLat,sinLat,gpara){var HA=LST-raDec.ra;var cosHA=Math.cos(HA),sinHA=Math.sin(HA);var cosDec=Math.cos(raDec.dec),sinDec=Math.sin(raDec.dec);var alt=sinDec*sinLat+cosLat*cosDec*cosHA;alt=Math.asin(alt);var cosAlt=Math.cos(alt);var sinA=cosDec*sinHA/cosAlt;var cosA=(cosDec*cosHA*sinLat-sinDec*cosLat)/cosAlt;var sA=sinA*gpara.cosRotAng-cosA*gpara.sinRotAng;var cA=cosA*gpara.cosRotAng+sinA*gpara.sinRotAng;if(Math.abs(cosAlt)<1e-10){sA=0;cA=1}if(alt>-.0175){alt+=atmosphericRefraction(alt,101,286)}var rc=gpara.r*Math.tan(.5*(gpara.halfPI-alt));var x=gpara.xc+rc*sA;var y=gpara.yc+rc*cA;return{x:x,y:y}}function topoCentricEquatorial(rGeo,ra,dec,LST,sinLat,cosLat){var x=rGeo*Math.cos(ra)*Math.cos(dec);var y=rGeo*Math.sin(ra)*Math.cos(dec);var z=rGeo*Math.sin(dec);var a=6378.1366;var f1_f2=.9933056020041341;var aC=a/Math.sqrt(cosLat*cosLat+f1_f2*sinLat*sinLat);var aS=f1_f2*aC;var xloc=aC*cosLat*Math.cos(LST);var yloc=aC*cosLat*Math.sin(LST);var zloc=aS*sinLat;var xtopo=x-xloc;var ytopo=y-yloc;var ztopo=z-zloc;var rTopo=Math.sqrt(xtopo*xtopo+ytopo*ytopo+ztopo*ztopo);var raTopo=Math.atan2(ytopo,xtopo);var decTopo=Math.asin(ztopo/rTopo);return{rTopo:rTopo,raTopo:raTopo,decTopo:decTopo}}function drawCircle(Ctx,LST,cosLat,sinLat,pole,gpara){var drawCir=true;var xp,yp,zp,sinA,cosA;if(Math.abs(pole.dec-gpara.halfPI)<1e-5){xp=-cosLat;yp=0;zp=sinLat}else{var HA=LST-pole.ra;var sinHA=Math.sin(HA),cosHA=Math.cos(HA);var sinDec=Math.sin(pole.dec),cosDec=Math.cos(pole.dec);var sinAlt=sinLat*sinDec+cosLat*cosDec*cosHA;var cosAlt;if(Math.abs(Math.abs(sinAlt)-1)<1e-5){drawCir=false}else{cosAlt=Math.sqrt(1-sinAlt*sinAlt);sinA=cosDec*sinHA/cosAlt;cosA=(cosDec*cosHA*sinLat-sinDec*cosLat)/cosAlt;xp=cosAlt*cosA;yp=cosAlt*sinA;zp=sinAlt}}if(drawCir){var norm=Math.sqrt(xp*xp+yp*yp);var Vx=-yp/norm,Vy=xp/norm;var Wx=-zp*Vy,Wy=zp*Vx,Wz=norm;var n=25;var dtheta=Math.PI/n;Ctx.beginPath();Ctx.setLineDash(pole.linestyle);sinA=Vy;cosA=Vx;var sA=sinA*gpara.cosRotAng-cosA*gpara.sinRotAng;var cA=cosA*gpara.cosRotAng+sinA*gpara.sinRotAng;var x=gpara.xc+gpara.r*sA,y=gpara.yc+gpara.r*cA;Ctx.moveTo(x,y);for(var i=1;i<n;i++){var theta=i*dtheta;var cosTheta=Math.cos(theta),sinTheta=Math.sin(theta);var Cx=cosTheta*Vx+sinTheta*Wx;var Cy=cosTheta*Vy+sinTheta*Wy;var Cz=sinTheta*Wz;var pom=Math.sqrt(Cx*Cx+Cy*Cy);if(pom<1e-5){Ctx.lineTo(gpara.xc,gpara.yc)}else{cosA=Cx/pom;sinA=Cy/pom;sA=sinA*gpara.cosRotAng-cosA*gpara.sinRotAng;cA=cosA*gpara.cosRotAng+sinA*gpara.sinRotAng;var alt=Math.asin(Cz);var rc=gpara.r*Math.tan(.5*(gpara.halfPI-alt));var x=gpara.xc+rc*sA;var y=gpara.yc+rc*cA;Ctx.lineTo(x,y)}}sinA=-Vy;cosA=-Vx;sA=sinA*gpara.cosRotAng-cosA*gpara.sinRotAng;cA=cosA*gpara.cosRotAng+sinA*gpara.sinRotAng;x=gpara.xc+gpara.r*sA;y=gpara.yc+gpara.r*cA;Ctx.lineTo(x,y);Ctx.strokeStyle=pole.color;Ctx.stroke()}}function milkyWayBoundaryPrecession(milky,T0,T){var p=precession_matrix(T0,T-T0);addPrecession(milky.north,p,T);addPrecession(milky.south,p,T);addPrecession(milky.betaCas,p);addPrecession(milky.thetaOph,p,T);addPrecession(milky.lambdaSco,p,T);addPrecession(milky.coalsack,p,T)}function addPrecession(array,p,T){array[0].epoch="";array[0].Tepoch=T;for(var i=1;i<array.length;i++){var precessed=precessed_ra_dec(array[i].ra,array[i].dec,p);array[i].ra=precessed.ra;array[i].dec=precessed.dec}}function drawMilkyWay(Ctx,LST,milky,cosLat,sinLat,gpara,pDraw){if(pDraw.showDayNight&&gpara.altSun<-6){Ctx.strokeStyle="yellow"}else{Ctx.strokeStyle="blue"}Ctx.setLineDash([]);drawLineAboveHorizon(Ctx,LST,milky.north,cosLat,sinLat,gpara);drawLineAboveHorizon(Ctx,LST,milky.south,cosLat,sinLat,gpara);drawLineAboveHorizon(Ctx,LST,milky.betaCas,cosLat,sinLat,gpara);drawLineAboveHorizon(Ctx,LST,milky.thetaOph,cosLat,sinLat,gpara);drawLineAboveHorizon(Ctx,LST,milky.lambdaSco,cosLat,sinLat,gpara);drawLineAboveHorizon(Ctx,LST,milky.coalsack,cosLat,sinLat,gpara)}function drawLineAboveHorizon(Ctx,LST,array,cosLat,sinLat,gpara){var x1,y1,x2,y2;var raDec={ra:array[1].ra,dec:array[1].dec};var coord=ra_dec_to_xy(raDec,LST,cosLat,sinLat,gpara);x2=coord.x;y2=coord.y;for(var i=2;i<array.length;i++){x1=x2;y1=y2;raDec={ra:array[i].ra,dec:array[i].dec};coord=ra_dec_to_xy(raDec,LST,cosLat,sinLat,gpara);x2=coord.x;y2=coord.y;addLine(Ctx,x1,y1,x2,y2,gpara)}}function galacticNorthPole(T){var ra0=3.366012906575397,dec0=.4734787372451951;var p=precession_matrix(0,T);return precessed_ra_dec(ra0,dec0,p)}function drawConstellationLinesAndSetupTips(Ctx,conLine,stars,LST,cosLat,sinLat,gpara,pDraw,newStar){Ctx.strokeStyle="#1B9722";if(pDraw.showDayNight&&gpara.altSun<-6){Ctx.strokeStyle="#93ff33"}Ctx.setLineDash([]);var ind,i,s,rad2;for(i=0;i<conLine.length;i++){$.each(conLine[i],function(key,line){if(key!="name"&&key!="abbr"){var x1,x2,y1,y2;var raDec={ra:stars[line[0]].ra,dec:stars[line[0]].dec};var coord=ra_dec_to_xy(raDec,LST,cosLat,sinLat,gpara);x2=coord.x;y2=coord.y;rad2=(x2-gpara.xc)*(x2-gpara.xc)+(y2-gpara.yc)*(y2-gpara.yc);if(tipsEnabled&&newStar[line[0]]&&rad2<gpara.r2){ind=line[0];newStar[ind]=false;s=pDraw.starMagA*stars[ind].mag+pDraw.starMagB;s=Math.max(s,3);tips[pDraw.loc-1].push({x:x2,y:y2,r2:s*s,object:"star",starInd:ind})}for(var j=1;j<line.length;j++){x1=x2;y1=y2;raDec={ra:stars[line[j]].ra,dec:stars[line[j]].dec};coord=ra_dec_to_xy(raDec,LST,cosLat,sinLat,gpara);x2=coord.x;y2=coord.y;if(pDraw.showConLines){addLine(Ctx,x1,y1,x2,y2,gpara)}rad2=(x2-gpara.xc)*(x2-gpara.xc)+(y2-gpara.yc)*(y2-gpara.yc);if(tipsEnabled&&newStar[line[j]]&&rad2<gpara.r2){ind=line[j];newStar[ind]=false;s=pDraw.starMagA*stars[ind].mag+pDraw.starMagB;s=Math.max(s,3);tips[pDraw.loc-1].push({x:x2,y:y2,r2:s*s,object:"star",starInd:ind})}}}})}}function drawConstellationLabel(Ctx,conLab,LST,cosLat,sinLat,gpara,pDraw){var fontSize=12;Ctx.font=fontSize.toString()+"px Arial";var b=255,b1=255;if(pDraw.showDayNight){b=Math.round(255*(1+gpara.altSun/18));b=Math.min(b,255);b=Math.max(0,b);b1=Math.round(b*.95)}var textColor="orange";if(b>130){textColor="#6c3483"}var bgColor="rgb("+b1+","+b1+","+b+")";for(var i=1;i<conLab.length;i++){var raDec={ra:conLab[i].ra,dec:conLab[i].dec};var coord=ra_dec_to_xy_above(raDec,LST,cosLat,sinLat,gpara);if(coord.x>-998){var w=Ctx.measureText(conLab[i].abbr).width;Ctx.fillStyle=bgColor;Ctx.fillRect(coord.x,coord.y-fontSize,w,fontSize);Ctx.fillStyle=textColor;Ctx.fillText(conLab[i].abbr,coord.x,coord.y)}if("ra2"in conLab[i]){raDec={ra:conLab[i].ra2,dec:conLab[i].dec2};coord=ra_dec_to_xy_above(raDec,LST,cosLat,sinLat,gpara);if(coord.x>-998){Ctx.fillStyle=bgColor;Ctx.fillRect(coord.x,coord.y-fontSize,w,fontSize);Ctx.fillStyle=textColor;Ctx.fillText(conLab[i].abbr,coord.x,coord.y)}}}}function recomputeStarPos(T,stars){var T0=stars[0].Tepoch;var dcen=T-T0;stars[0].epoch="";stars[0].Tepoch=T;var p=precession_matrix(T0,dcen);for(var i=1;i<stars.length;i++){var x=stars[i].x+stars[i].vx*dcen;var y=stars[i].y+stars[i].vy*dcen;var z=stars[i].z+stars[i].vz*dcen;var r=Math.sqrt(x*x+y*y+z*z);if(stars[i].dist2000<99e3){stars[i].mag=stars[i].mag2000+5*Math.LOG10E*Math.log(r/stars[i].dist2000)}stars[i].x=p.p11*x+p.p12*y+p.p13*z;stars[i].y=p.p21*x+p.p22*y+p.p23*z;stars[i].z=p.p31*x+p.p32*y+p.p33*z;var vx=stars[i].vx,vy=stars[i].vy,vz=stars[i].vz;stars[i].vx=p.p11*vx+p.p12*vy+p.p13*vz;stars[i].vy=p.p21*vx+p.p22*vy+p.p23*vz;stars[i].vz=p.p31*vx+p.p32*vy+p.p33*vz;stars[i].ra=Math.atan2(stars[i].y,stars[i].x);stars[i].dec=Math.asin(stars[i].z/r)}}function addLine(Ctx,x1,y1,x2,y2,gpara){var SQR=function(x){return x*x};var r1sq=SQR(x1-gpara.xc)+SQR(y1-gpara.yc);var r2sq=SQR(x2-gpara.xc)+SQR(y2-gpara.yc);if(r1sq>gpara.r2&&r2sq>gpara.r2){return}var x1p=x1,x2p=x2,y1p=y1,y2p=y2;if(r1sq>gpara.r2||r2sq>gpara.r2){var R1dotR2=(x1-gpara.xc)*(x2-gpara.xc)+(y1-gpara.yc)*(y2-gpara.yc);var dR1R2sq=SQR(x1-x2)+SQR(y1-y2);var q=r1sq-R1dotR2;var s,q;if(r1sq<=gpara.r2){s=(q+Math.sqrt(q*q+dR1R2sq*(gpara.r2-r1sq)))/dR1R2sq;x2p=x1+s*(x2-x1);y2p=y1+s*(y2-y1)}else{s=(q-Math.sqrt(q*q+dR1R2sq*(gpara.r2-r1sq)))/dR1R2sq;x1p=x1+s*(x2-x1);y1p=y1+s*(y2-y1)}}Ctx.beginPath();Ctx.moveTo(x1p,y1p);Ctx.lineTo(x2p,y2p);Ctx.stroke()}function addLegend(pDraw){var Canvas=document.getElementById("legend");var Ctx=Canvas.getContext("2d");Ctx.clearRect(0,0,Canvas.width,Canvas.height);Ctx.font="20px Arial";Ctx.fillStyle="black";Ctx.fillText("Magnitude scale:",0,20);var m,s,x,y;var twoPI=2*Math.PI;for(m=-1;m<6;m++){s=pDraw.starMagA*m+pDraw.starMagB;x=180+(m+1)*40;var dx=-20;if(m==-1){dx=-22}Ctx.fillText(m.toString(),x+dx,20);Ctx.beginPath();Ctx.arc(x,15,s,0,twoPI);Ctx.fill()}Ctx.fillText("Planet symbols:   Sun",0,50);Ctx.fillText("Moon",270,50);Ctx.fillText("Mercury",380,50);Ctx.fillText("Venus",160,75);Ctx.fillText("Mars",270,75);Ctx.fillText("Jupiter",380,75);Ctx.fillText("Saturn",160,100);Ctx.fillText("Uranus",270,100);Ctx.fillText("Neptune",380,100);Ctx.fillStyle=pDraw.color[0];x=195;y=50;Ctx.fillText(String.fromCharCode(pDraw.code[0]),x,y);Ctx.beginPath();Ctx.arc(x-pDraw.offset[0].x,y-pDraw.offset[0].y,pDraw.size[0],0,twoPI);Ctx.fill();Ctx.fillStyle=pDraw.color[1];x=320;Ctx.fillText(String.fromCharCode(pDraw.code[1]),x,y);Ctx.beginPath();Ctx.arc(x-pDraw.offset[1].x,y-pDraw.offset[1].y,pDraw.size[1],0,twoPI);Ctx.fill();Ctx.fillStyle=pDraw.color[2];x=455;Ctx.fillText(String.fromCharCode(pDraw.code[2]),x,y);Ctx.beginPath();Ctx.arc(x-pDraw.offset[2].x,y-pDraw.offset[2].y,pDraw.size[2],0,twoPI);Ctx.fill();Ctx.fillStyle=pDraw.color[3];x=220;y=75;Ctx.fillText(String.fromCharCode(pDraw.code[3]),x,y);Ctx.beginPath();Ctx.arc(x-pDraw.offset[3].x,y-pDraw.offset[3].y,pDraw.size[3],0,twoPI);Ctx.fill();Ctx.fillStyle=pDraw.color[4];x=320;Ctx.fillText(String.fromCharCode(pDraw.code[4]),x,y);Ctx.beginPath();Ctx.arc(x-pDraw.offset[4].x,y-pDraw.offset[4].y,pDraw.size[4],0,twoPI);Ctx.fill();Ctx.fillStyle=pDraw.color[5];x=445;Ctx.fillText(String.fromCharCode(pDraw.code[5]),x,y);Ctx.beginPath();Ctx.arc(x-pDraw.offset[5].x,y-pDraw.offset[5].y,pDraw.size[5],0,twoPI);Ctx.fill();Ctx.fillStyle=pDraw.color[6];x=225;y=100;Ctx.fillText(String.fromCharCode(pDraw.code[6]),x,y);Ctx.beginPath();Ctx.arc(x-pDraw.offset[6].x,y-pDraw.offset[6].y,pDraw.size[6],0,twoPI);Ctx.fill();Ctx.fillStyle=pDraw.color[7];x=335;Ctx.fillText(String.fromCharCode(pDraw.code[7]),x,y);Ctx.beginPath();Ctx.arc(x-pDraw.offset[7].x,y-pDraw.offset[7].y,pDraw.size[7],0,twoPI);Ctx.fill();Ctx.fillStyle=pDraw.color[8];x=460;Ctx.fillText(String.fromCharCode(pDraw.code[8]),x,y);Ctx.beginPath();Ctx.arc(x-pDraw.offset[8].x,y-pDraw.offset[8].y,pDraw.size[8],0,twoPI);Ctx.fill()}function displayPopup(e,loc){var canvas=document.getElementById("loc"+loc);var rect=canvas.getBoundingClientRect();var x=e.clientX-rect.left;var y=e.clientY-rect.top;var hit=false;var i,tip;for(i=0;i<tips[loc-1].length;i++){tip=tips[loc-1][i];var dx=x-tip.x;var dy=y-tip.y;if(dx*dx+dy*dy<tip.r2){hit=true;break}}if(hit){var tipId="#tip"+loc;var tipText=tipId+"text";$(tipText).empty();var d,long,lat;if(loc==1){d=date1;long=long1;lat=lat1*Math.PI/180}else{d=date2;long=long2;lat=lat2*Math.PI/180}var hours=d.h+d.m/60+d.s/3600;var LST0=d.LST_rad-1.0027378119113546*hours*Math.PI/12;LST0-=2*Math.PI*Math.floor(LST0*.5/Math.PI);var para={loc:loc,lat:lat,LST:d.LST_rad,LST0:LST0,T:d.T,dT:d.dT,hours:hours};var TD=d.T+d.dT;if(TD>-50&&TD<10){para.nu=nutation(TD);para.LAST=para.LST+para.nu.Ee}if(tip.object=="star"){displayPopupStar(tip,para)}else if(tip.object=="Sun"){displayPopupSun(tip,para)}else if(tip.object=="Moon"){displayPopupMoon(tip,para)}else{displayPopupPlanet(tip,para)}$(tipId).css("left",tip.x+3+"px");$(tipId).css("top",tip.y+3+"px");$(tipId).show()}}function closePopup(idn){var id="#"+idn;$(id).hide();$(id+"text").empty();$(id).css("left","-200px")}function displayPopupSun(tip,para){var sun;var calculate=[false,false,true,false,false,false,false,false];var TD=para.T+para.dT;if(highPrecCalInTips){sun=planetGeoVSOP(TD,"Sun",false)}else{sun=planetPos(TD,calculate)[2]}var rad_to_deg=180/Math.PI,rad_to_hr=12/Math.PI;var ra2000=convertDM(sun.ra2000*rad_to_hr,"hm");var dec2000=convertDM(sun.dec2000*rad_to_deg,"dm");var cosLat=Math.cos(para.lat);var sinLat=Math.sin(para.lat);var raDec,topo;var LST=para.LST;if("nu"in para){LST=para.LAST;raDec=precessed_ra_dec(sun.ra,sun.dec,para.nu);sun.ra=raDec.ra;sun.dec=raDec.dec;topo=topoCentricEquatorial(sun.rGeo*149597870.7,sun.ra,sun.dec,LST,sinLat,cosLat)}else{topo=topoCentricEquatorial(sun.rGeo*149597870.7,sun.ra,sun.dec,LST,sinLat,cosLat)}var aber={ra:topo.raTopo,dec:topo.decTopo};if("nu"in para){var aberpara={T:TD,m:para.nu,LAST:para.LAST,cosLat:cosLat,sinLat:sinLat};aber=aberration(topo.raTopo,topo.decTopo,aberpara)}var raTopo=convertDM(aber.ra*rad_to_hr,"hm");var decTopo=convertDM(aber.dec*rad_to_deg,"dm");var p=precession_matrix(TD,-TD);if("nu"in para){var inv_nu={p11:para.nu.p11,p12:para.nu.p21,p13:para.nu.p31,p21:para.nu.p12,p22:para.nu.p22,p23:para.nu.p32,p31:para.nu.p13,p32:para.nu.p23,p33:para.nu.p33};raDec=precessed_ra_dec(topo.raTopo,topo.decTopo,inv_nu);raDec=precessed_ra_dec(raDec.ra,raDec.dec,p)}else{raDec=precessed_ra_dec(topo.raTopo,topo.decTopo,p)}var conNames=constellationAbbrNames();var conste=conNames[get_constellation(raDec.ra,raDec.dec)];var ra2000Topo=convertDM(raDec.ra*rad_to_hr,"hm");var dec2000Topo=convertDM(raDec.dec*rad_to_deg,"dm");var ang1AU=31.965;var ang=ang1AU/sun.rGeo;raDec={ra:aber.ra,dec:aber.dec};var hor=ra_dec_to_alt_az(raDec,LST,cosLat,sinLat);var alt=(hor.alt+atmosphericRefraction(hor.alt,101,286))*rad_to_deg;var azi=Math.atan2(hor.sinA,hor.cosA)*rad_to_deg+180;alt=alt.toFixed(2)+"&deg;";azi=azi.toFixed(2)+"&deg;";var T0=TD-para.hours/876600;var ra=[],dec=[];for(var i=0;i<25;i++){sun=planetPos(T0+i/876600,calculate)[2];ra[i]=sun.ra;dec[i]=sun.dec}var tt=getTransitTime(para.LST0,para.lat,ra,dec,false);var Transit=tt.t+" ("+tt.alt+")";var alt1=-.01454441043328608;var trs=getRiseSet(alt1,para.LST0,para.lat,ra,dec);var RiseSet=trs.rise+" ("+trs.azRise+"), "+trs.set;if(trs.rise=="above"){RiseSet="circumpolar"}alt1=-.1047197551196598;trs=getRiseSet(alt1,para.LST0,para.lat,ra,dec);var civ=trs.rise+", "+trs.set;if(trs.rise=="above"){civ="above -6&deg;"}alt1=-.2094395102393196;trs=getRiseSet(alt1,para.LST0,para.lat,ra,dec);var nat=trs.rise+", "+trs.set;if(trs.rise=="above"){nat="above -12&deg;"}alt1=-.3141592653589793;trs=getRiseSet(alt1,para.LST0,para.lat,ra,dec);var ast=trs.rise+", "+trs.set;if(trs.rise=="above"){ast="above -18&deg;"}var txt="<table>";txt+='<tr><th colspan="2">Sun</th></tr>';txt+="<tr><td>Distance</td> <td>"+sun.rGeo.toFixed(3)+" AU</td></tr>";txt+="<tr><td>Angular Diameter</td> <td>"+ang.toFixed(1)+"'</td></tr>";txt+="<tr><td>Geocentric Ra, Dec (J2000)</td> <td>"+ra2000+", "+dec2000+"</td></tr>";txt+="<tr><td>Topocentric Ra, Dec (J2000)</td> <td>"+ra2000Topo+", "+dec2000Topo+"</td></tr>";if("nu"in para){txt+="<tr><td>App. Topo. Ra, Dec (of date)</td> <td>"+raTopo+", "+decTopo+"</td></tr>";txt+="<tr><td>Apparent Sidereal Time</td> <td>"+convertDM(para.LAST*12/Math.PI,"hm")+"</td></tr>"}else{txt+="<tr><td>Topocentric Ra, Dec (of date)</td> <td>"+raTopo+", "+decTopo+"</td></tr>"}txt+="<tr><td>Constellation</td><td>"+conste+"</td></tr>";txt+="<tr><td>Altitude, Azimuth</td> <td>"+alt+", "+azi+"</td></tr>";txt+="<tr><td>Rise (Azi), Set</td> <td>"+RiseSet+"</td></tr>";txt+="<tr><td>Upper Transit (Altitude)</td> <td>"+Transit+"</td></tr>";txt+="<tr><td>Civ. Twi. beg., end</td> <td>"+civ+"</td></tr>";txt+="<tr><td>Nat. Twi. beg., end</td> <td>"+nat+"</td></tr>";txt+="<tr><td>Ast. Twi. beg., end</td> <td>"+ast+"</td></tr>";var tipText="#tip"+para.loc+"text";$(tipText).append(txt)}function displayPopupMoon(tip,para){var moon,sun,Dmoon,Lmoon,Lsun,Dsun;var TD=para.T+para.dT;if(highPrecCalInTips){moon=MoonPosElpMpp02(TD,true);Dmoon=moon.rGeo;var calculate=[false,false,true,false,false,false,false,false];sun=planetPos(TD,calculate)[2];Dsun=sun.rGeo;Lsun=sun.lam2000;Lmoon=moon.lam2000}else{moon=MediumMoon(TD);sun=MiniSun(TD);Dsun=1;Lsun=sun.lam;Lmoon=moon.lam;Dmoon=moon.rGeo}var rad_to_deg=180/Math.PI,rad_to_hr=12/Math.PI;var cosLat=Math.cos(para.lat);var sinLat=Math.sin(para.lat);var geoRa2000=convertDM(moon.ra2000*rad_to_hr,"hm");var geoDec2000=convertDM(moon.dec2000*rad_to_deg,"dm");var raDec,topo;var LST=para.LST;if("nu"in para){LST=para.LAST;raDec=precessed_ra_dec(moon.ra,moon.dec,para.nu);moon.ra=raDec.ra;moon.dec=raDec.dec;topo=topoCentricEquatorial(moon.rGeo,moon.ra,moon.dec,LST,sinLat,cosLat)}else{topo=topoCentricEquatorial(moon.rGeo,moon.ra,moon.dec,para.LST,sinLat,cosLat)}var aber={ra:topo.raTopo,dec:topo.decTopo};if("nu"in para){var omega=7292115855264215e-20;var a=omega*6378.1366/299792.458;var f1_f2=.9933056020041341;var aC_cosLat=cosLat*a/Math.sqrt(cosLat*cosLat+f1_f2*sinLat*sinLat);var betax=-aC_cosLat*Math.sin(para.LAST);var betay=aC_cosLat*Math.cos(para.LAST);var x=Math.cos(aber.ra)*Math.cos(aber.dec)+betax;var y=Math.sin(aber.ra)*Math.cos(aber.dec)+betay;var z=Math.sin(aber.dec);var norm=Math.sqrt(x*x+y*y+z*z);aber.ra=Math.atan2(y,x);aber.dec=Math.asin(z/norm)}var topoRa=convertDM(aber.ra*rad_to_hr,"hm");var topoDec=convertDM(aber.dec*rad_to_deg,"dm");var rTopo=topo.rTopo;var p=precession_matrix(TD,-TD);if("nu"in para){var inv_nu={p11:para.nu.p11,p12:para.nu.p21,p13:para.nu.p31,p21:para.nu.p12,p22:para.nu.p22,p23:para.nu.p32,p31:para.nu.p13,p32:para.nu.p23,p33:para.nu.p33};raDec=precessed_ra_dec(topo.raTopo,topo.decTopo,inv_nu);raDec=precessed_ra_dec(raDec.ra,raDec.dec,p)}else{raDec=precessed_ra_dec(topo.raTopo,topo.decTopo,p)}var conNames=constellationAbbrNames();var conste=conNames[get_constellation(raDec.ra,raDec.dec)];var topoRa2000=convertDM(raDec.ra*rad_to_hr,"hm");var topoDec2000=convertDM(raDec.dec*rad_to_deg,"dm");raDec={ra:aber.ra,dec:aber.dec};var hor=ra_dec_to_alt_az(raDec,LST,cosLat,sinLat);var alt=(hor.alt+atmosphericRefraction(hor.alt,101,286))*rad_to_deg;var azi=Math.atan2(hor.sinA,hor.cosA)*rad_to_deg+180;alt=alt.toFixed(2)+"&deg;";azi=azi.toFixed(2)+"&deg;";var illumPhase=moonIlluminated(sun.ra,sun.dec,topo.raTopo,topo.decTopo,Lsun,Lmoon,rTopo,Dsun);var illum=illumPhase.illuminated.toFixed(2);var phase=illumPhase.phase;var elong=illumPhase.elongTxt;var mag=illumPhase.mag.toFixed(1);var T0=TD-para.hours/876600;var ra=[],dec=[];for(var i=0;i<25;i++){moon=MediumMoon(T0+i/876600);ra[i]=moon.ra;dec[i]=moon.dec}var tt=getTransitTime(para.LST0,para.lat,ra,dec,true);var Transit=tt.t+" ("+tt.alt+")";var alt1=.002327105669325773;var trs=getRiseSet(alt1,para.LST0,para.lat,ra,dec);var Rise=trs.rise+" ("+trs.azRise+")";var Set=trs.set+" ("+trs.azSet+")";if(trs.rise=="above"){Rise="circumpolar";Set="circumpolar"}var txt="<table>";txt+='<tr><th colspan="2">Moon</th></tr>';txt+="<tr><td>Geocentric Distance</td><td>"+Dmoon.toFixed(0)+" km ("+(Dmoon/6371).toFixed(1)+"R<sub>&oplus;</sub>)</td></tr>";txt+="<tr><td>Topocentric Distance</td><td>"+rTopo.toFixed(0)+" km ("+(rTopo/6371).toFixed(1)+"R<sub>&oplus;</sub>)</td></tr>";txt+="<tr><td>Angular Diameter</td> <td>"+(3475/rTopo*10800/Math.PI).toFixed(1)+"'</td></tr>";txt+="<tr><td>Phase</td> <td>"+phase+"</td></tr>";txt+="<tr><td>Illuminated</td> <td>"+illum+"</td> </tr>";txt+="<tr><td>Apparent Magnitude</td> <td>"+mag+"</td> </tr>";txt+="<tr><td>Solar Elongation</td> <td>"+elong+"</td> </tr>";txt+="<tr><td>Geocentric Ra, Dec (J2000)</td> <td>"+geoRa2000+", "+geoDec2000+"</td></tr>";txt+="<tr><td>Topocentric Ra, Dec (J2000)</td> <td>"+topoRa2000+", "+topoDec2000+"</td></tr>";if("nu"in para){txt+="<tr><td>App. Topo. Ra, Dec (of date)</td> <td>"+topoRa+", "+topoDec+"</td></tr>";txt+="<tr><td>Apparent Sidereal Time</td> <td>"+convertDM(para.LAST*12/Math.PI,"hm")+"</td></tr>"}else{txt+="<tr><td>Topocentric Ra, Dec (of date)</td> <td>"+topoRa+", "+topoDec+"</td></tr>"}txt+="<tr><td>Constellation</td><td>"+conste+"</td></tr>";txt+="<tr><td>Altitude, Azimuth</td> <td>"+alt+", "+azi+"</td></tr>";txt+="<tr><td>Rise (Azimuth)</td> <td>"+Rise+"</td></tr>";txt+="<tr><td>Upper Transit (Altitude)</td> <td>"+Transit+"</td></tr>";txt+="<tr><td>Set (Azimuth)</td> <td>"+Set+"</td></tr>";var tipText="#tip"+para.loc+"text";$(tipText).append(txt)}function displayPopupPlanet(tip,para){var calculate=[false,false,true,false,false,false,false,false];var ind=tip.pIndex-1;if(tip.pIndex<4){ind--}calculate[ind]=true;var TD=para.T+para.dT;var planet,sun;if(highPrecCalInTips){planet=planetGeoVSOP(TD,tip.object,true);sun={rGeo:planet.dSunEarth,lam2000:planet.lamSun2000,bet2000:planet.betSun2000}}else{var planets=planetPos(TD,calculate);planet=planets[ind];sun=planets[2]}var rHelio=planet.rHelio,rGeo=planet.rGeo;var rad_to_deg=180/Math.PI,rad_to_hr=12/Math.PI;var ra2000=convertDM(planet.ra2000*rad_to_hr,"hm");var dec2000=convertDM(planet.dec2000*rad_to_deg,"dm");var cosLat=Math.cos(para.lat);var sinLat=Math.sin(para.lat);var raDec,topo;var LST=para.LST;if("nu"in para){LST=para.LAST;raDec=precessed_ra_dec(planet.ra,planet.dec,para.nu);planet.ra=raDec.ra;planet.dec=raDec.dec;topo=topoCentricEquatorial(rGeo*149597870.7,planet.ra,planet.dec,LST,sinLat,cosLat)}else{topo=topoCentricEquatorial(rGeo*149597870.7,planet.ra,planet.dec,LST,sinLat,cosLat)}var aber={ra:topo.raTopo,dec:topo.decTopo};if("nu"in para){var aberpara={T:TD,m:para.nu,LAST:para.LAST,cosLat:cosLat,sinLat:sinLat};aber=aberration(topo.raTopo,topo.decTopo,aberpara)}var raTopo=convertDM(aber.ra*rad_to_hr,"hm");var decTopo=convertDM(aber.dec*rad_to_deg,"dm");var p=precession_matrix(TD,-TD);if("nu"in para){var inv_nu={p11:para.nu.p11,p12:para.nu.p21,p13:para.nu.p31,p21:para.nu.p12,p22:para.nu.p22,p23:para.nu.p32,p31:para.nu.p13,p32:para.nu.p23,p33:para.nu.p33};raDec=precessed_ra_dec(topo.raTopo,topo.decTopo,inv_nu);raDec=precessed_ra_dec(raDec.ra,raDec.dec,p)}else{raDec=precessed_ra_dec(topo.raTopo,topo.decTopo,p)}var conNames=constellationAbbrNames();var conste=conNames[get_constellation(raDec.ra,raDec.dec)];var ra2000Topo=convertDM(raDec.ra*rad_to_hr,"hm");var dec2000Topo=convertDM(raDec.dec*rad_to_deg,"dm");var elongIllum=elongationPhase(planet,sun);var Elong=elongIllum.elongation;var illum=elongIllum.illuminated;var magPara={object:tip.object,i:elongIllum.phaseAng,rHelio:rHelio,rGeo:rGeo,T:TD,planet:planet,sun:sun};var mag=planetMag(magPara);var ang1AU={Mercury:6.726865375887558,Venus:16.68838398040351,Mars:9.3468517633725,Jupiter:192.78588394427936,Saturn:160.5799887548923,Uranus:69.93800100978119,Neptune:67.89738430970871};var ang=ang1AU[tip.object]/rGeo;raDec={ra:aber.ra,dec:aber.dec};var hor=ra_dec_to_alt_az(raDec,LST,cosLat,sinLat);var alt=(hor.alt+atmosphericRefraction(hor.alt,101,286))*rad_to_deg;var azi=Math.atan2(hor.sinA,hor.cosA)*rad_to_deg+180;alt=alt.toFixed(2)+"&deg;";azi=azi.toFixed(2)+"&deg;";var ra=[],dec=[];var T0=TD-para.hours/876600;calculate[2]=false;for(var i=0;i<25;i++){planet=planetPos(T0+i/876600,calculate)[ind];ra[i]=planet.ra;dec[i]=planet.dec}var tt=getTransitTime(para.LST0,para.lat,ra,dec,false);var Transit=tt.t+" ("+tt.alt+")";var alt1=-.009890199094634533;var trs=getRiseSet(alt1,para.LST0,para.lat,ra,dec);var RiseSet=trs.rise+" ("+trs.azRise+"), "+trs.set;if(trs.rise=="above"){RiseSet="circumpolar"}var tipText="#tip"+para.loc+"text";var txt="<table>";txt+='<tr><th colspan="2">'+tip.object+"</th></tr>";txt+="<tr><td>Heliocentric Distance</td> <td>"+rHelio.toFixed(3)+" AU</td></tr>";txt+="<tr><td>Geocentric Distance</td> <td>"+rGeo.toFixed(3)+" AU</td></tr>";txt+="<tr><td>Angular Diameter</td> <td>"+ang.toPrecision(3)+'"</td></tr>';txt+="<tr> <td>Elongation</td> <td>"+Elong+"</td></tr>";if(tip.pIndex<5){txt+="<tr><td>Illuminated</td> <td>"+illum+"</td></tr>"}txt+="<tr><td>Apparent Magnitude</td> <td>"+mag.toFixed(1)+"</td></tr>";txt+="<tr><td>Geocentric Ra, Dec (J2000)</td> <td>"+ra2000+", "+dec2000+"</td></tr>";txt+="<tr><td>Topocentric Ra, Dec (J2000)</td> <td>"+ra2000Topo+", "+dec2000Topo+"</td></tr>";if("nu"in para){txt+="<tr><td>App. Topo. Ra, Dec (of date)</td> <td>"+raTopo+", "+decTopo+"</td></tr>";txt+="<tr><td>Apparent Sidereal Time</td> <td>"+convertDM(para.LAST*12/Math.PI,"hm")+"</td></tr>"}else{txt+="<tr><td>Topocentric Ra, Dec (of date)</td> <td>"+raTopo+", "+decTopo+"</td></tr>"}txt+="<tr><td>Constellation</td><td>"+conste+"</td></tr>";txt+="<tr><td>Altitude, Azimuth</td> <td>"+alt+", "+azi+"</td></tr>";txt+="<tr><td>Rise (Azi), Set</td> <td>"+RiseSet+"</td></tr>";txt+="<tr><td>Upper Transit (Altitude)</td> <td>"+Transit+"</td></tr>";$(tipText).append(txt)}function displayPopupStar(tip,para){var stars=brightStars();var s=stars[tip.starInd];var TD=para.T+para.dT;var T0=stars[0].Tepoch;var dcen=TD-T0;var x=s.x+s.vx*dcen;var y=s.y+s.vy*dcen;var z=s.z+s.vz*dcen;var distpc=Math.sqrt(x*x+y*y+z*z);if(TD>-50&&TD<10){var calculate=[false,false,true,false,false,false,false,false];var sun=planetPos(TD,calculate)[2];var rpc=sun.rGeo*Math.PI/648e3;var xe=-rpc*Math.cos(sun.ra2000)*Math.cos(sun.dec2000);var ye=-rpc*Math.sin(sun.ra2000)*Math.cos(sun.dec2000);var ze=-rpc*Math.sin(sun.dec2000);x-=xe;y-=ye;z-=ze;distpc=Math.sqrt(x*x+y*y+z*z)}var rad_to_deg=180/Math.PI,rad_to_hr=12/Math.PI;var ra2000r=Math.atan2(y,x),dec2000r=Math.asin(z/distpc);var ra2000=convertDM(ra2000r*rad_to_hr,"hm");var dec2000=convertDM(dec2000r*rad_to_deg,"dm");var conNames=constellationAbbrNames();var conste=conNames[get_constellation(ra2000r,dec2000r)];var conste2000=conNames[s.con];if(conste!=conste2000){conste=conste2000+" (2000), "+conste+" (";conste+=(para.loc==1?date1.yyyy:date2.yyyy)+")"}var p=precession_matrix(T0,dcen);var LST=para.LST;if("nu"in para){LST=para.LAST;var p11=para.nu.p11*p.p11+para.nu.p12*p.p21+para.nu.p13*p.p31;var p12=para.nu.p11*p.p12+para.nu.p12*p.p22+para.nu.p13*p.p32;var p13=para.nu.p11*p.p13+para.nu.p12*p.p23+para.nu.p13*p.p33;var p21=para.nu.p21*p.p11+para.nu.p22*p.p21+para.nu.p23*p.p31;var p22=para.nu.p21*p.p12+para.nu.p22*p.p22+para.nu.p23*p.p32;var p23=para.nu.p21*p.p13+para.nu.p22*p.p23+para.nu.p23*p.p33;var p31=para.nu.p31*p.p11+para.nu.p32*p.p21+para.nu.p33*p.p31;var p32=para.nu.p31*p.p12+para.nu.p32*p.p22+para.nu.p33*p.p32;var p33=para.nu.p31*p.p13+para.nu.p32*p.p23+para.nu.p33*p.p33;p={p11:p11,p12:p12,p13:p13,p21:p21,p22:p22,p23:p23,p31:p31,p32:p32,p33:p33}}var x1=p.p11*x+p.p12*y+p.p13*z;var y1=p.p21*x+p.p22*y+p.p23*z;var z1=p.p31*x+p.p32*y+p.p33*z;var ra=Math.atan2(y1,x1);var dec=Math.asin(z1/distpc);if("nu"in para){var aberpara={T:TD,m:para.nu,LAST:para.LAST,cosLat:Math.cos(para.lat),sinLat:Math.sin(para.lat)};raDec=aberration(ra,dec,aberpara);ra=raDec.ra;dec=raDec.dec}var raStr=convertDM(ra*rad_to_hr,"hm");var decStr=convertDM(dec*rad_to_deg,"dm");var txt="<table>";var name=s.name;var dist2000=s.dist2000;var distly=distpc*3.2616;var dist,varmag="";if(dist2000>=99e3){dist="?"}else{dist=distpc.toPrecision(4)+" pc ("+distly.toPrecision(4)+" ly)"}if("bayer"in s&&name.slice(0,1)!="<"){name+=", "+s.bayer+" "+s.con}var mag=s.mag.toFixed(2);var magStr="Mag.";var delMag=0;if(s.dist2000<99e3){var absmag=s.mag+5-5*Math.LOG10E*Math.log(s.dist2000);delMag=5*Math.LOG10E*Math.log(distpc/s.dist2000);mag=s.mag+delMag;magStr+=", Abs. Mag.";mag=mag.toFixed(2)+", "+absmag.toFixed(2)}if("varMax"in s&&"varMin"in s){var varMax=parseFloat(s.varMax)+delMag;var varMin=parseFloat(s.varMin)+delMag;varmag=varMax.toFixed(2)+" &ndash; "+varMin.toFixed(2)}txt+='<tr><th colspan="2">'+name+"</th></tr>";txt+="<tr><td>"+magStr+"</td> <td>"+mag+"</td></tr>";if(varmag!=""){txt+="<tr><td>Variable</td> <td>"+varmag+"</td></tr>"}txt+="<tr><td>Distance</td> <td>"+dist+"</td></tr>";if("spect"in s){txt+="<tr><td>Spec, col. ind.</td> <td>"+s.spect;if("colorInd"in s){txt+=", "+s.colorInd}txt+="</td></tr>"}txt+="<tr><td>Constellation</td> <td>"+conste+"</td></tr>";txt+="<tr><td>Ra, Dec (J2000)</td> <td>"+ra2000+", "+dec2000+"</td></tr>";if("nu"in para){txt+="<tr><td>App. Ra, Dec (of date)</td> <td>"+raStr+", "+decStr+"</td></tr>";txt+="<tr><td>Apparent Sidereal Time</td> <td>"+convertDM(para.LAST*12/Math.PI,"hm")+"</td></tr>"}else{txt+="<tr><td>Ra, Dec (of date)</td> <td>"+raStr+", "+decStr+"</td></tr>"}var raDec={ra:ra,dec:dec};var cosLat=Math.cos(para.lat);var sinLat=Math.sin(para.lat);var hor=ra_dec_to_alt_az(raDec,LST,cosLat,sinLat);var alt=(hor.alt+atmosphericRefraction(hor.alt,101,286))*rad_to_deg;var azi=Math.atan2(hor.sinA,hor.cosA)*rad_to_deg+180;txt+="<tr><td>Alt, Azimuth</td> <td>"+alt.toFixed(2)+"&deg;, "+azi.toFixed(2)+"&deg;</td></tr>";alt=-.009890199094634533;var t=riseSetStar(para.LST0,alt,para.lat,ra,dec);var transit=t.transit+" ("+t.altTransit+")";txt+="<tr><td>Upper Transit (Alt)</td> <td>"+transit+"</td></tr>";var riseSet=t.rise+" ("+t.azRise+"), "+t.set;if(t.rise=="above"){riseSet="circumpolar"}txt+="<tr><td>Rise (Azi), Set</td> <td>"+riseSet+"</td></tr>";txt+="</table>";var tipText="#tip"+para.loc+"text";$(tipText).append(txt)}function setupDrawingParameters(){var pColor=["red","orange","maroon","#FF00FF","red","brown","brown","#7277e6","#7277e6"];var pName=["Sun","Moon","Mercury","Venus","Mars","Jupiter","Saturn","Uranus","Neptune"];var pSize=[1,2,1,2,2,2,2,2,2];var pCode=[9788,9789,9791,9792,9794,9795,9796,9954,9798];var offset=[{x:-10,y:7},{x:-10,y:7},{x:-5,y:7},{x:-7,y:0},{x:-7,y:2},{x:-10,y:7},{x:-5,y:7},{x:-10,y:3},{x:-8,y:5}];var s1=1,s2=5;var a=(s1-s2)/6.5;var b=s1-5*a;var pDraw={color:pColor,code:pCode,size:pSize,offset:offset,pName:pName,starMagA:a,starMagB:b};return pDraw}var animateDtStep=2;var frameRate=40;var animate_id;function Animate(loc){var id="#animate"+loc;var state=$(id).text();if(state=="Play Animation"){$(id).text("Stop Animation");$("button.menu").attr("disabled",true);$("button.setupAnimate").attr("disabled",true);$("button.controlAnimate").attr("disabled",true);$(id).attr("disabled",false);tipsEnabled=false;tips[0].length=0;tips[1].length=0;$(".animationStop").empty();clearInterval(animate_id);animate_id=setInterval(function(){playAnimation(loc,1)},frameRate)}else{clearInterval(animate_id);$(id).text("Play Animation");$("button.menu").attr("disabled",false);$("button.setupAnimate").attr("disabled",false);$("button.controlAnimate").attr("disabled",false);tipsEnabled=true;starChart()}}function playAnimation(loc,dframes){var d,tzString,long;if(loc==1){d=date1;tzString="GMT"+tz1.tzString;long=long1}else{d=date2;tzString="GMT"+tz2.tzString;long=long2}d.D+=dframes*animateDtStep/1440;d.T=d.D/36525;d.dT=DeltaT(d.T);var date=CalDat(d.D-d.tz/1440);d.yyyy=date.yy;d.mm=date.mm;d.dd=date.dd;d.dateString=date.dateString;var deltaH=dframes*animateDtStep/60;deltaH-=24*Math.floor(deltaH/24);var hour=d.h+d.m/60+d.s/3600+deltaH;hour-=24*Math.floor(hour/24);d.h=Math.floor(hour);d.m=Math.floor((hour-d.h)*60);d.s=3600*(hour-d.h-d.m/60);d.timeString=generateTimeString(d.h,d.m,d.s);var GMST=getGMST(d);var LST=getSidereal(GMST,long);d.LST=LST.hour;d.LST_rad=LST.rad;d.LSTstring=LST.string;var dString=d.dateString+"&nbsp;&nbsp;"+d.timeString+"  "+tzString;if(Math.abs(d.yyyy)>2e5){clearInterval(animate_id);$("#animate"+loc).text("Play Animation");$("button.menu").attr("disabled",false);$("button.setupAnimate").attr("disabled",false);$("button.controlAnimate").attr("disabled",false);$("#warning"+loc).append('<p style="color:red;" class="animationStop">Animation stops since the formula used for precession is only valid between the years -200,000 and 200,000.</p>');tipsEnabled=true;starChart();return}$("#time"+loc).html(dString);$("#siderealTime"+loc).text(LST.string);starChartLoc(loc)}function displayAnimationSetup(loc){$("button.menu").attr("disabled",true);$("button.setupAnimate").attr("disabled",true);$("button.controlAnimate").attr("disabled",true);var animId="#animationSetup"+loc;$(animId).empty();$(animId).slideDown();var txt="<h2>Animation Setup</h2>";$(animId).append(txt);txt='<form name="animSetup" action="" method="get">';txt+="<table>";txt+='<tr><td colspan="3"><b>Location '+loc+"</b></td></tr>";txt+='<tr><td>Name: <input type="text" id="placeAnim"></td>';txt+='<td>Longitude: <input type="number" id="longAnim" step="any" min=-180 max=180 /></td> <td>Latitude: <input type="number" id="latAnim" step="any" min=-90 max=90 /></td></tr>';txt+='<tr><td colspan="3"><b>Start Time</b></td></tr>';txt+='<tr><td>Year: <input type="number" id="yearAnim" step="1" min=-200000 max=200000 /></td>';txt+='<td>Month: <input type="number" id="monthAnim" step="1" min=1 max=12 /></td>';txt+='<td>Day: <input type="number" id="dayAnim" step="1" min=1 max=31 /></td></tr>';txt+='<tr><td>Hour: <input type="number" id="hourAnim" step="1" min=0 max=23 /></td>';txt+='<td>Minute: <input type="number" id="minuteAnim" step="1" min=0 max=59 /></td>';txt+='<td>Second: <input type="number" id="secondAnim" step="any" min=0 max=60 /></td></tr>';txt+='<tr><td>Time zone: GMT+<input type="number" id="tzAnim" step="any" min=-12 max=14 /></td>';txt+="<td></td><td></td> </tr>";txt+='<tr><td colspan="3">Choose time step/frame: <input type="radio" id="radioCustom" value="custom" onclick="animRadioClick(';txt+="'custom')";txt+='" />Custom &nbsp;&nbsp;&nbsp;<input type="radio" id="radioSiderealDay" value="sidereal" onclick="animRadioClick(';txt+="'sidereal')";txt+='" />1 sidereal day&nbsp;&nbsp;&nbsp;<input type="radio" id="radioDay" value="day" onclick="animRadioClick(';txt+="'day')";txt+='" />1 day&nbsp;&nbsp;&nbsp;<input type="radio" id="radioCentury" value="century" onclick="animRadioClick(';txt+="'century')";txt+='" />36525 days (100 years)<br />';txt+='<input type="number" id="timeStepAnim" step="any" min=-52596000 max=52596000 /> minutes</td></tr>';txt+='<tr><td colspan="3">Time between 2 frames: <input type="number" id="frameRateAnim" step="1" min=1 max=1000 /> ms</td></tr>';txt+="</table><br />";txt+='<p><input type="button" value="Submit" onclick="animationSetup(this.form,'+loc+')" /></p>';txt+="</form>";$(animId).append(txt);txt='<div id="animationErrorlocs"></div>';$(animId).append(txt);txt="<p>Note:";txt+="<ul>";txt+="<li>Time step/frame is the time between two successive frames in the animation.</li>";txt+="<li>Time between two frames determines how frequently the star chart will be updated during the animation. It can be as fast as 1 ms, but the chart may not be fast enough to be drawn in 1 ms, depending on the processor speed.</li>";txt+="<li>If you choose time step/frame to be one sidereal day, the sidereal time will be fixed in all frames and stars will be fixed in the star chart during the animation. You will see the Sun, Moon and planets move with respect to the stars.</li>";txt+="<li>If you choose time step/frame to be one day, the local time will be fixed in the animation and you will see the daily shift of constellations with respect to the horizon. In the day time, you will see the Sun trace out a figure-eight pattern over the year, known as the analemma.</li>";txt+="<li>The positions of the Sun, Moon and planets are only accurate for years between -3000 and 3000.</li>";txt+="<li>If you choose time step/frame to be 36525 days (1 Julian century), the time soon goes beyond the range in which the positions of the Sun, Moon and planets are accurate. It is better to turn off displaying the Sun, Moon, planets and day/night background before playing the animation. Note also that the constellation lines will be distorted as stars move away from their current positions as a result of proper motions. In addition to stars' motions in space, the positions of the stars in the chart also change as a result of precession and Earth's spin. To visualize the effects of stars' motions and precession separately over millennia, it is better to view the animation in <a href='chartGCRS.html' target='_blank'>equatorial star charts</a>.</li>";txt+="<li>The animation will stop when year goes beyond 200,000 since the formula for the precession become inaccurate after that time.";txt+="</ul></p>";$(animId).append(txt);var d,place,long,lat,tz;if(loc==1){d=date1;place=place1;long=long1;lat=lat1;tz=tz1}else{d=date2;place=place2;long=long2;lat=lat2;tz=tz2}$("#placeAnim").val(place);$("#longAnim").val(long);$("#latAnim").val(lat);$("#yearAnim").val(d.yyyy);$("#monthAnim").val(d.mm);$("#dayAnim").val(d.dd);$("#hourAnim").val(d.h);$("#minuteAnim").val(d.m);$("#secondAnim").val(d.s.toFixed(3));$("#tzAnim").val(-tz.tz/60);$("#timeStepAnim").val(animateDtStep);$("#frameRateAnim").val(frameRate);$("#radioCustom").prop("checked",false);$("#radioSiderealDay").prop("checked",false);$("#radioDay").prop("checked",false);if(animateDtStep==1440){$("#radioDay").prop("checked",true);$("#timeStepAnim").prop("disabled",true)}else if(Math.abs(animateDtStep-1436.06817551502)<.0016){$("#radioSiderealDay").prop("checked",true);$("#timeStepAnim").val(1436.06817551502);$("#timeStepAnim").prop("disabled",true)}else if(animateDtStep==52596e3){$("#radioCentury").prop("checked",true);$("#timeStepAnim").prop("disabled",true)}else{$("#radioCustom").prop("checked",true);$("#timeStepAnim").prop("disabled",false)}}function animRadioClick(select){$("#radioCustom").prop("checked",false);$("#radioSiderealDay").prop("checked",false);$("#radioDay").prop("checked",false);$("#radioCentury").prop("checked",false);switch(select){case"custom":$("#radioCustom").prop("checked",true);$("#timeStepAnim").prop("disabled",false);break;case"sidereal":$("#radioSiderealDay").prop("checked",true);$("#timeStepAnim").val(1436.06817551502);$("#timeStepAnim").prop("disabled",true);break;case"day":$("#radioDay").prop("checked",true);$("#timeStepAnim").val(1440);$("#timeStepAnim").prop("disabled",true);break;case"century":$("#radioCentury").prop("checked",true);$("#timeStepAnim").val(52596e3);$("#timeStepAnim").prop("disabled",true)}}function animationSetup(form,loc){var place=form.placeAnim.value;var long=parseFloat(form.longAnim.value);var lat=parseFloat(form.latAnim.value);var tzoffset=parseFloat(form.tzAnim.value);var tz={tz:-tzoffset*60};var tzof=Math.abs(tzoffset)+.5/60;if(tzoffset>=0){tz.tzString="+"}else{tz.tzString="-"}var hs=Math.floor(tzof).toString();if(hs.length<2){hs="0"+hs}var ms=Math.floor(60*(tzof-Math.floor(tzof))).toString();if(ms.length<2){ms="0"+ms}tz.tzString+=hs+ms;var yy=parseInt(form.yearAnim.value);var mm=parseInt(form.monthAnim.value);var dd=parseInt(form.dayAnim.value);var h=parseInt(form.hourAnim.value);var m=parseInt(form.minuteAnim.value);var s=parseFloat(form.secondAnim.value);var dt=parseFloat(form.timeStepAnim.value);var fr=parseInt(form.frameRateAnim.value);var errid="#animationErrorlocs";$(errid).empty();var min=-180,max=180;var message="Invalid longitude! Longitude must be a number between -180 and 180. West of Greenwich is negative; east of Greenwich is positive.";sanityCheck(long,"#longAnim",min,max,message,errid);min=-90;max=90;message="Invalid latitude! Latitude must be a number between -90 and 90, positive in the northern hemisphere and negative in the southern hemisphere.";sanityCheck(lat,"#latAnim",min,max,message,errid);min=-2e5;max=2e5;message="Invalid year! Please enter an integer between "+min+" and "+max+". Note that 0 means 1 BCE, -1 means 2 BCE and so on. Note that the positions of the Sun, Moon and planets are only accurate for years between -3000 and 3000.";sanityCheck(yy,"#yearAnim",min,max,message,errid);min=1;max=12;message="Invalid month! Month must be an integer between 1 and 12.";sanityCheck(mm,"#monthAnim",min,max,message,errid);min=1;max=31;message="Invalid day! Day must be an integer between 1 and 31.";sanityCheck(dd,"#dayAnim",min,max,message,errid);min=0;max=23;message="Invalid hour! Hour must be an integer between 0 and 23.";sanityCheck(h,"#hourAnim",min,max,message,errid);min=0;max=59;message="Invalid minute! Minute must be an integer between 0 and 59.";sanityCheck(m,"#minuteAnim",min,max,message,errid);min=0;max=60;message="Invalid second! Second must be a number between 0 and 60.";sanityCheck(s,"#secondAnim",min,max,message,errid);min=-12;max=14;message="Invalid time zone! Time zone must be a number between -12 and 14.";sanityCheck(tzoffset,"#tzAnim",min,max,message,errid);min=-52596e3;max=52596e3;message="Invalid time step/frame! Please enter a number between "+min+" and "+max+".";sanityCheck(dt,"#timeStepAnim",min,max,message,errid);min=1;max=1e3;message="Invalid time between 2 frames! Please enter an integer between "+min+" and "+max+".";sanityCheck(fr,"#frameRateAnim",min,max,message,errid);if($(errid).text()==""){var animId="#animationSetup"+loc;$(animId).slideUp();$(animId).empty();$("button.menu").attr("disabled",false);$("button.setupAnimate").attr("disabled",false);$("button.controlAnimate").attr("disabled",false);var d;if(loc==1){place1=place;long1=long;lat1=lat;d=date1;tz1={tz:tz.tz,tzString:tz.tzString}}else{place2=place;long2=long;lat2=lat;d=date2;tz2={tz:tz.tz,tzString:tz.tzString}}var D=getDm(yy,mm,dd,0);var date=CalDat(D);d.yyyy=date.yy;d.mm=date.mm;d.dd=date.dd;d.h=h;d.m=m;d.s=s;d.tz=tz.tz;d.tzString=tz.tzString;d.dateString=date.dateString;d.timeString=generateTimeString(h,m,s);d.D=getDm(d.yyyy,d.mm,d.dd,tz.tz)+(h+m/60+s/3600)/24;d.T=d.D/36525;d.dT=DeltaT(d.T);var GMST=getGMST(d);var LST=getSidereal(GMST,long);d.LST=LST.hour;d.LST_rad=LST.rad;d.LSTstring=LST.string;animateDtStep=dt;frameRate=fr;starChart()}}var csvdata="";function riseSetPage(){$("#starCharts").hide();$("#riseSetArea").show();var deg_to_rad=Math.PI/180;$("#riseSetPlace1").text(place1);$("#riseSetlong1").html(long1+"&deg;");$("#riseSetlat1").html(lat1+"&deg;");$("#riseSetDate1").html(date1.dateString);$("#riseSetTtimeZone1").html("GMT"+tz1.tzString);var loc1={locNum:1,long:long1*deg_to_rad,lat:lat1*deg_to_rad,tz:tz1.tz,yyyy:date1.yyyy,mm:date1.mm,dd:date1.dd};riseSetLoc(loc1);$("#riseSetPlace2").text(place2);$("#riseSetlong2").html(long2+"&deg;");$("#riseSetlat2").html(lat2+"&deg;");$("#riseSetDate2").html(date2.dateString);$("#riseSetTtimeZone2").html("GMT"+tz2.tzString);var loc2={locNum:2,long:long2*deg_to_rad,lat:lat2*deg_to_rad,tz:tz2.tz,yyyy:date2.yyyy,mm:date2.mm,dd:date2.dd};riseSetLoc(loc2)}function backToStarCharts(){$("#RSMultiResult").empty();$("#riseSetMultipleDays").slideUp();$("#riseSetMainPage").slideDown();$("#starCharts").show();$("#riseSetArea").hide()}function riseSetChangeLocs(){$("button.menu").attr("disabled",true);$("#RSMultiResult").empty();$("#riseSetMultipleDays").slideUp();$("#riseSetMainPage").slideDown();var place1current=$("#riseSetPlace1").text();var place2current=$("#riseSetPlace2").text();var long1String=$("#riseSetlong1").html();var pos=long1String.indexOf("&deg;");var long1current=parseFloat(long1String.slice(0,pos));var long2String=$("#riseSetlong2").html();pos=long2String.indexOf("&deg;");var long2current=parseFloat(long2String.slice(0,pos));var lat1String=$("#riseSetlat1").html();pos=lat1String.indexOf("&deg;");var lat1current=parseFloat(lat1String.slice(0,pos));var lat2String=$("#riseSetlat2").html();pos=lat2String.indexOf("&deg;");var lat2current=parseFloat(lat2String.slice(0,pos));var d1String=$("#riseSetDate1").text();var d2String=$("#riseSetDate2").text();pos=d1String.indexOf("-");var yy1=parseInt(d1String.slice(0,pos));var mm1=parseInt(d1String.substr(pos+1,2));var dd1=parseInt(d1String.substr(pos+4,2));pos=d2String.indexOf("-");var yy2=parseInt(d2String.slice(0,pos));var mm2=parseInt(d2String.substr(pos+1,2));var dd2=parseInt(d2String.substr(pos+4,2));var tz1String=$("#riseSetTtimeZone1").text();var tz2String=$("#riseSetTtimeZone2").text();var tz1sign=tz1String.substr(3,1);var tz2sign=tz2String.substr(3,1);var tzone1=parseFloat(tz1String.substr(4,2))+parseFloat(tz1String.substr(6,2))/60;if(tz1sign=="-"){tzone1=-tzone1}var tzone2=parseFloat(tz2String.substr(4,2))+parseFloat(tz2String.substr(6,2))/60;if(tz2sign=="-"){tzone2=-tzone2}$("#riseSetInputlocs").slideDown();$("#riseSetPlace1in").val(place1current);$("#riseSetLong1in").val(long1current);$("#riseSetLat1in").val(lat1current);$("#riseSetYear1in").val(yy1);$("#riseSetMonth1in").val(mm1);$("#riseSetDay1in").val(dd1);$("#riseSetTz1in").val(tzone1);$("#riseSetPlace2in").val(place2current);$("#riseSetLong2in").val(long2current);$("#riseSetLat2in").val(lat2current);$("#riseSetYear2in").val(yy2);$("#riseSetMonth2in").val(mm2);$("#riseSetDay2in").val(dd2);$("#riseSetTz2in").val(tzone2);$("#riseSetSynTimeYes").prop("checked",true);$("#riseSetSynTimeNo").prop("checked",false);$(".timeInputLoc2").hide()}function riseSetChangeLocationsAndDates(form){var place1new=form.riseSetPlace1in.value;var long1new=parseFloat(form.riseSetLong1in.value);var lat1new=parseFloat(form.riseSetLat1in.value);var tzoffset1=parseFloat(form.riseSetTz1in.value);var tz1new={tz:-tzoffset1*60};var tzof=Math.abs(tzoffset1)+.5/60;if(tzoffset1>=0){tz1new.tzString="+"}else{tz1new.tzString="-"}var hs=Math.floor(tzof).toString();if(hs.length<2){hs="0"+hs}var ms=Math.floor(60*(tzof-Math.floor(tzof))).toString();if(ms.length<2){ms="0"+ms}tz1new.tzString+=hs+ms;var yy1=parseInt(form.riseSetYear1in.value);var mm1=parseInt(form.riseSetMonth1in.value);var dd1=parseInt(form.riseSetDay1in.value);var place2new=form.riseSetPlace2in.value;var long2new=parseFloat(form.riseSetLong2in.value);var lat2new=parseFloat(form.riseSetLat2in.value);var tzoffset2=parseFloat(form.riseSetTz2in.value);var tz2new={tz:-tzoffset2*60};tzof=Math.abs(tzoffset2)+.5/60;if(tzoffset2>=0){tz2new.tzString="+"}else{tz2new.tzString="-"}hs=Math.floor(tzof).toString();if(hs.length<2){hs="0"+hs}ms=Math.floor(60*(tzof-Math.floor(tzof))).toString();if(ms.length<2){ms="0"+ms}tz2new.tzString+=hs+ms;var sync=document.getElementById("riseSetSynTimeYes").checked;var yy2,mm2,dd2;if(sync){yy2=yy1;mm2=mm1;dd2=dd1}else{yy2=parseInt(form.riseSetYear2in.value);mm2=parseInt(form.riseSetMonth2in.value);dd2=parseInt(form.riseSetDay2in.value)}var errid="#riseSetErrorlocs";$(errid).empty();var min=-180,max=180;var message="Invalid longitude! Longitude must be a number between -180 and 180. West of Greenwich is negative; east of Greenwich is positive.";sanityCheck(long1new,"#riseSetLong1in",min,max,message,errid);sanityCheck(long2new,"#riseSetLong2in",min,max,message,errid);min=-90;max=90;message="Invalid latitude! Latitude must be a number between -90 and 90, positive in the northern hemisphere and negative in the southern hemisphere.";sanityCheck(lat1new,"#riseSetLat1in",min,max,message,errid);sanityCheck(lat2new,"#riseSetLat2in",min,max,message,errid);min=-3e3;max=3e3;message="Invalid year! Please enter an integer between -3000 and 3000. Note that 0 means 1 BCE, -1 means 2 BCE and so on. This webpage can only handle years between -3000 and 3000.";sanityCheck(yy1,"#riseSetYear1in",min,max,message,errid);if(!sync){sanityCheck(yy2,"#riseSetYear2in",min,max,message,errid)}min=1;max=12;message="Invalid month! Month must be an integer between 1 and 12.";sanityCheck(mm1,"#riseSetMonth1in",min,max,message,errid);if(!sync){sanityCheck(mm2,"#riseSetMonth2in",min,max,message,errid)}min=1;max=31;message="Invalid day! Day must be an integer between 1 and 31.";sanityCheck(dd1,"#riseSetDay1in",min,max,message,errid);if(!sync){sanityCheck(dd2,"#riseSetDay2in",min,max,message,errid)}min=-12;max=14;message="Invalid time zone! Time zone must be a number between -12 and 14.";sanityCheck(tzoffset1,"#riseSetTz1in",min,max,message,errid);sanityCheck(tzoffset2,"#riseSetTz2in",min,max,message,errid);if($(errid).text()==""){$("#riseSetInputlocs").slideUp();$("button.menu").attr("disabled",false);var D=getDm(yy1,mm1,dd1,0);var date=CalDat(D);yy1=date.yy;mm1=date.mm;dd1=date.dd;var d1String=date.dateString;D=getDm(yy2,mm2,dd2,0);date=CalDat(D);yy2=date.yy;mm2=date.mm;dd2=date.dd;var d2String=date.dateString;$("#riseSetPlace1").text(place1new);$("#riseSetlong1").html(long1new+"&deg;");$("#riseSetlat1").html(lat1new+"&deg;");$("#riseSetDate1").html(d1String);$("#riseSetTtimeZone1").html("GMT"+tz1new.tzString);var deg_to_rad=Math.PI/180;var loc1={locNum:1,long:long1new*deg_to_rad,lat:lat1new*deg_to_rad,tz:tz1new.tz,yyyy:yy1,mm:mm1,dd:dd1};riseSetLoc(loc1);$("#riseSetPlace2").text(place2new);$("#riseSetlong2").html(long2new+"&deg;");$("#riseSetlat2").html(lat2new+"&deg;");$("#riseSetDate2").html(d2String);$("#riseSetTtimeZone2").html("GMT"+tz2new.tzString);var loc2={locNum:2,long:long2new*deg_to_rad,lat:lat2new*deg_to_rad,tz:tz2new.tz,yyyy:yy2,mm:mm2,dd:dd2};riseSetLoc(loc2)}}function riseSetMultipleDates(){$("button.menu").attr("disabled",true);$("#riseSetMainPage").slideUp(10);$("#RSMultiResult").empty();$("#riseSetMultipleDays").slideDown(10);$("#riseSetMultipleDaysInput").slideDown(10);var long1prev=$("#RSMultiLongin").val();if(long1prev==""){var place1current=$("#riseSetPlace1").text();var long1String=$("#riseSetlong1").html();var pos=long1String.indexOf("&deg;");var long1current=parseFloat(long1String.slice(0,pos));var lat1String=$("#riseSetlat1").html();pos=lat1String.indexOf("&deg;");var lat1current=parseFloat(lat1String.slice(0,pos));var tz1String=$("#riseSetTtimeZone1").text();var tz1sign=tz1String.substr(3,1);var tzone1=parseFloat(tz1String.substr(4,2))+parseFloat(tz1String.substr(6,2))/60;if(tz1sign=="-"){tzone1=-tzone1}$("#RSMultiPlacein").val(place1current);$("#RSMultiLongin").val(long1current);$("#RSMultiLatin").val(lat1current);$("#RSMultiTzin").val(tzone1);$("#RSMultiEpoch").val(2e3);$("#RSMultiDt").val(1)}if($("#objects").val()=="Star"){$(".RSMultiRaDec").show()}}function RSMultipleDays(form){var place=form.RSMultiPlacein.value;var long=parseFloat(form.RSMultiLongin.value);var lat=parseFloat(form.RSMultiLatin.value);var tzoffset=parseFloat(form.RSMultiTzin.value);var tzof=Math.abs(tzoffset)+.5/60;var tzString="GMT";if(tzoffset>=0){tzString+="+"}else{tzString+="-"}var hs=Math.floor(tzof).toString();if(hs.length<2){hs="0"+hs}var ms=Math.floor(60*(tzof-Math.floor(tzof))).toString();if(ms.length<2){ms="0"+ms}tzString+=hs+ms;var obj=form.objects.value;var ra,dec,epoch;if(obj=="Star"){ra=parseFloat(form.RSMultiRa.value);dec=parseFloat(form.RSMultiDec.value);epoch=parseFloat(form.RSMultiEpoch.value)}var yy1=parseInt(form.RSMultiYear1in.value);var mm1=parseInt(form.RSMultiMonth1in.value);var dd1=parseInt(form.RSMultiDay1in.value);var yy2=parseInt(form.RSMultiYear2in.value);var mm2=parseInt(form.RSMultiMonth2in.value);var dd2=parseInt(form.RSMultiDay2in.value);var deltaD=parseInt(form.RSMultiDt.value);var errid="#RSMultiErrorlocs";$(errid).empty();var objectList=["Sun","Moon","Mercury","Venus","Mars","Jupiter","Saturn","Uranus","Neptune","Star"];var objectSelected=false;$("#objects").css("background-color","white");for(var i=0;i<objectList.length;i++){if(obj==objectList[i]){objectSelected=true;break}}if(!objectSelected){var text='<p style="color:red;">Please select an object.</p>';$("#objects").css("background-color","#e2a8a8");$(errid).append(text)}var min=-180,max=180;var message="Invalid longitude! Longitude must be a number between -180 and 180. West of Greenwich is negative; east of Greenwich is positive.";sanityCheck(long,"#RSMultiLongin",min,max,message,errid);min=-90;max=90;message="Invalid latitude! Latitude must be a number between -90 and 90, positive in the northern hemisphere and negative in the southern hemisphere.";sanityCheck(lat,"#RSMultiLatin",min,max,message,errid);min=-12;max=14;message="Invalid time zone! Time zone must be a number between -12 and 14.";sanityCheck(tzoffset,"#RSMultiTzin",min,max,message,errid);if(obj=="Star"){min=0;max=24;message="Invalid RA! RA must be a number between 0 and 24.";sanityCheck(ra,"#RSMultiRa",min,max,message,errid);min=-90;max=90;message="Invalid Dec! Dec must be a number between -90 and 90.";sanityCheck(dec,"#RSMultiDec",min,max,message,errid);min=-2e5;max=2e5;message="Invalid epoch. Please enter a year bteween -200,000 and 200,000: 2000 means J2000.0, 2050 means 50 years after J2000.0.";sanityCheck(epoch,"#RSMultiEpoch",min,max,message,errid)}min=-3e3;max=3e3;message="Invalid year! Please enter an integer between -3000 and 3000. Note that 0 means 1 BCE, -1 means 2 BCE and so on. This webpage can only handle years between -3000 and 3000.";sanityCheck(yy1,"#RSMultiYear1in",min,max,message,errid);sanityCheck(yy2,"#RSMultiYear2in",min,max,message,errid);min=1;max=12;message="Invalid month! Month must be an integer between 1 and 12.";sanityCheck(mm1,"#RSMultiMonth1in",min,max,message,errid);sanityCheck(mm2,"#RSMultiMonth2in",min,max,message,errid);min=1;max=31;message="Invalid day! Day must be an integer between 1 and 31.";sanityCheck(dd1,"#RSMultiDay1in",min,max,message,errid);sanityCheck(dd2,"#RSMultiDay2in",min,max,message,errid);min=1;max=Number.POSITIVE_INFINITY;message="Invalid time step! Time step must be a positive integer.";sanityCheck(deltaD,"#RSMultiDt",min,max,message,errid);if($(errid).text()==""){$("#riseSetMultipleDaysInput").slideUp();$("button.menu").attr("disabled",false);var text="<p>Location: "+place+"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Longitude: "+long.toString()+"&deg;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Latitude: "+lat.toString()+"&deg;";$("#RSMultiResult").append(text);text="<p>Time zone: "+tzString+"</p>";$("#RSMultiResult").append(text);if(obj=="Star"){text="<p>Object: a star with RA = "+ra+"<sup>h</sup>, &nbsp;&nbsp; Dec = "+dec+"&deg;, &nbsp;&nbsp; epoch:"+epoch+"</p>"}else{text="<p>Object: "+obj+"</p>"}$("#RSMultiResult").append(text);var D1=getDm(yy1,mm1,dd1,0);var D2=getDm(yy2,mm2,dd2,0);var RSMultiInput={long:long,lat:lat,tz:tzoffset,D1:D1,D2:D2,deltaD:deltaD,obj:obj,ra:ra,dec:dec,epoch:epoch};calcRiseSetMultipleDates(RSMultiInput)}}function riseSetShowHideRADec(Class){var classj="."+Class;var show=$("#objects").val()=="Star";if(show){$(classj).show()}else{$(classj).hide()}}function getLST0(D,T,long,tz){var D0=Math.floor(D-.5)+.5;var H=tz/60;if(H<0){H+=24}var GMST=.06570748587250752*D0;GMST-=24*Math.floor(GMST/24);GMST+=6.697374558336001+1.0027378119113546*H;GMST-=24*Math.floor(GMST/24);GMST+=2.686296296296296e-7+T*(.08541030618518518+T*2577003148148148e-20);var LST0=GMST+long*12/Math.PI;LST0-=24*Math.floor(LST0/24);return LST0*Math.PI/12}function riseSetLoc(loc){var locStr=loc.locNum.toString();var Dm=getDm(loc.yyyy,loc.mm,loc.dd,loc.tz);var T=Dm/36525;var LST0=getLST0(Dm,T+DeltaT(T),loc.long,loc.tz);riseSetPlanetsTwilights(LST0,loc.locNum,loc.lat,T);riseSetBrightestStars(LST0,loc.locNum,loc.lat,T+DeltaT(T))}function riseSetPlanetsTwilights(LST0,locNum,lat,T){var dT=DeltaT(T);var sinLat=Math.sin(lat),cosLat=Math.cos(lat);var i;var parray=[];for(i=0;i<25;i++){parray[i]=sunMoonPlanets(T+i/876600+dT)}var ra=[],dec=[];var locid,alt,trs,tt,txt;locid="#riseSetSun"+locNum.toString();$(locid).empty();for(i=0;i<25;i++){ra[i]=parray[i][0].ra;dec[i]=parray[i][0].dec}tt=getTransitTime(LST0,lat,ra,dec,false);alt=-.01454441043328608;trs=getRiseSet(alt,LST0,lat,ra,dec);if(trs.rise=="above"){txt="<p>Upper transit: "+tt.t+" (Altitude = "+tt.alt+"); ";txt+="the sun is above the horizon all day."}else if(trs.rise=="below"){txt="<p>Upper transit: "+tt.t+" (Altitude = "+tt.alt+"); ";txt+="the sun is below the horizon all day."}else{txt="<p>Sunrise: "+trs.rise+" (Azimuth = "+trs.azRise+")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";txt+="Sunset: "+trs.set+" (Azimuth = "+trs.azSet+")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";txt+="Upper transit: "+tt.t+" (Altitude = "+tt.alt+")</p>"}$(locid).append(txt);alt=-.1047197551196598;trs=getRiseSet(alt,LST0,lat,ra,dec);if(trs.rise=="above"){txt="<p>No civil twilights. The Sun's altitude is above -6&deg; all day.</p>"}else if(trs.rise=="below"){txt="<p>No civil twilights. The Sun's altitude is below -6&deg; all day.</p>"}else{txt="<p>Civil twilight: begins at "+trs.rise+", ends at "+trs.set+".</p>"}$(locid).append(txt);alt=-.2094395102393196;trs=getRiseSet(alt,LST0,lat,ra,dec);if(trs.rise=="above"){txt="<p>No nautical twilights. The Sun's altitude is above -12&deg; all day.</p>"}else if(trs.rise=="below"){txt="<p>No nautical twilights. The Sun's altitude is below -12&deg; all day.</p>"}else{txt="<p>Nautical twilight: begins at "+trs.rise+", ends at "+trs.set+".</p>"}$(locid).append(txt);alt=-.3141592653589793;trs=getRiseSet(alt,LST0,lat,ra,dec);if(trs.rise=="above"){txt="<p>No astronomical twilights. The Sun's altitude is above -18&deg; all day.</p>"}else if(trs.rise=="below"){txt="<p>No astronomical twilights. The Sun's altitude is below -18&deg; all day.</p>"}else{txt="<p>Astronomical twilight: begins at "+trs.rise+", ends at "+trs.set+".</p>"}$(locid).append(txt);locid="#riseSetMoon"+locNum.toString();$(locid).empty();for(i=0;i<25;i++){ra[i]=parray[i][1].ra;dec[i]=parray[i][1].dec}tt=getTransitTime(LST0,lat,ra,dec,true);alt=.002327105669325773;trs=getRiseSet(alt,LST0,lat,ra,dec);if(trs.rise=="above"){txt="<p>Upper transit: "+tt.t+" (Altitude = "+tt.alt+"); ";txt+="the Moon is above the horizon all day."}else if(trs.rise=="below"){txt="<p>Upper transit: "+tt.t+" (Altitude = "+tt.alt+"); ";txt+="the Moon is below the horizon all day."}else{txt="<p>Moonrise: "+trs.rise+" (Azimuth = "+trs.azRise+")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";txt+="Moonset: "+trs.set+" (Azimuth = "+trs.azSet+")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";txt+="Upper transit: "+tt.t+" (Altitude = "+tt.alt+")</p>"}$(locid).append(txt);var raSun=parray[12][0].ra,decSun=parray[12][0].dec;var raMoon=parray[12][1].ra,decMoon=parray[12][1].dec;var Dmoon=parray[12][1].rGeo;var Lsun=parray[12][0].lam2000;var Dsun=parray[12][0].rGeo;var Lmoon=parray[12][1].lam2000;var illumPhase=moonIlluminated(raSun,decSun,raMoon,decMoon,Lsun,Lmoon,Dmoon,Dsun);var illum=illumPhase.illuminated,phase=illumPhase.phase;var mag=illumPhase.mag.toFixed(1);txt="<p>At 12:00 in the given time zone...<br />";txt+="Fraction of Moon illuminated: "+illum.toFixed(2)+",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Phase: "+phase+",<br />";txt+="Apparent Magnitude: "+mag+",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Solar elongation: "+illumPhase.elongTxt+".</p>";$(locid).append(txt);var names=["Mercury","Venus","Mars","Jupiter","Saturn","Uranus","Neptune"];locid="#riseSetPlanets"+locNum.toString();$(locid).empty();txt="<p>The elongation is the angular distance between the planet and the Sun. Elongations, fractions illuminated and magnitudes of the planets are given at 12:00 in the given time zone.</p>";$(locid).append(txt);$(locid).append("<table>");txt="<tr><th>Planet</th> <th>Rise (Azimuth)</th> <th>Transit (Alt)</th> ";txt+="<th>Set (Azimuth)</th> <th>Elong.</th> <th>Illum.</th> <th>Mag.</th> </tr>";$(locid).append(txt);for(var j=2;j<9;j++){for(i=0;i<25;i++){ra[i]=parray[i][j].ra;dec[i]=parray[i][j].dec}tt=getTransitTime(LST0,lat,ra,dec,false);alt=-.009890199094634533;trs=getRiseSet(alt,LST0,lat,ra,dec);var Rise=trs.rise+" ("+trs.azRise+")";var Set=trs.set+" ("+trs.azSet+")";if(trs.rise=="above"){Rise="circumpolar";Set="circumpolar"}else if(trs.rise=="below"){Rise="invisible";Set="invisible"}var planet=parray[12][j];var sun=parray[12][0];var elongIllum=elongationPhase(planet,sun);var Elong=elongIllum.elongation;var illum=elongIllum.illuminated;var magPara={object:names[j-2],i:elongIllum.phaseAng,rHelio:planet.rHelio,rGeo:planet.rGeo,T:T+.5/36525+dT,planet:planet,sun:sun};var mag=planetMag(magPara);txt="<tr><td>"+names[j-2]+"</td>";txt+=" <td>"+Rise+"</td>";txt+=" <td>"+tt.t+" ("+tt.alt+")"+"</td>";txt+=" <td>"+Set+"</td>";txt+=" <td>"+Elong+"</td>";txt+=" <td>"+illum+"</td>";txt+=" <td>"+mag.toFixed(1)+"</td> </tr>";$(locid).append(txt)}$(locid).append("</table>")}function riseSetBrightestStars(LST0,locNum,lat,T){var bstars=brightestStarsLoc[locNum-1];var T0=bstars[0].Tepoch;if(Math.abs(T-T0)>.1){recomputeStarPos(T,bstars)}var locid="#riseSetStars"+locNum.toString();$(locid).empty();$(locid).append("<table>");var txt="<tr><th>Star</th> <th>Rise (Azimuth)</th> <th>Transit</th> ";txt+="<th>Set</th> </tr>";$(locid).append(txt);var alt=-.009890199094634533;for(var i=1;i<bstars.length;i++){var t=riseSetStar(LST0,alt,lat,bstars[i].ra,bstars[i].dec);var Rise=t.rise+" ("+t.azRise+")";var Transit=t.transit+" ("+t.altTransit+")";if(t.rise=="above"){Rise="circumpolar";t.set="circumpolar"}else if(t.rise=="below"){Rise="invisible";t.set="invisible"}txt="<tr><td>"+bstars[i].name+"</td>";txt+=" <td>"+Rise+"</td>";txt+=" <td>"+Transit+"</td>";txt+=" <td>"+t.set+"</td> </tr>";$(locid).append(txt)}$(locid).append("</table>");txt="<p>Note: For stars, the azimuth at the set time is the negative of its azimuth when it rises.</p>";$(locid).append(txt)}function calcRiseSetMultipleDates(input){var deg_to_rad=Math.PI/180;var long=input.long*deg_to_rad;var lat=input.lat*deg_to_rad;var T1=(input.D1-input.tz/24)/36525;var deltaT=input.deltaD/36525;var count=0,max=1e4,max_table=500;var D,T,dT,LST0,raDec,i;var outid="#RSMultiResult";var parray;var ra=[],dec=[];var alt,trs,tt,txt,dateString;var calculate=[false,false,false,false,false,false,false,false];txt="<p>Note: The table shows data up to "+max_table+" dates. The csv file contains data up to "+max+" dates.</p>";$(outid).append(txt);txt="<p>Times are given according to the time zone listed above. Daylight saving time is not taken into account.</p>";$(outid).append(txt);switch(input.obj){case"Sun":txt="<p>The Gregorian calendar is approximately in sync with the Sun's motion, so the times are approximately the same at the same date every year. It is therefore not necessary to calculate the times for more than a year.</p>";$(outid).append(txt);txt="<p>In the table below, the angles beside the rise and set times are the azimuths of the Sun at the rise and set times. Azimuth is measured from north and turning positive towards the east. The angle and direction beside the upper transit time is the altitute and direction of the Sun's center at transit. Atmospheric refraction is added when the altitude is above -1&deg;. For the twilights, the first time is the beginning of the twilight and the second time is the end of the twilight.</p>";$(outid).append(txt);txt='<p><button onclick="download_csv(csvdata,'+"'Sun.csv')"+'">Download csv file</button></p>';$(outid).append(txt);$(outid).append("<table>");txt="<tr><th>Date</th> <th>Rise</th> <th>Transit</th> <th>Set</th>";txt+="<th>Civ. Twi.</th> <th>Nat. Twi.</th>";txt+="<th>Ast. Twi.</th> </tr>";$(outid).append(txt);csvdata="Date, Rise, Transit, Set, Civ. Twi. beg., Civ. Twi. end, Nat. Twi. beg., Nat. Twi. end, Ast. Twi. beg., Ast. Twi. end\n";calculate[2]=true;for(D=input.D1;D<=input.D2;D+=input.deltaD){dateString=CalDat(D).dateString;T=T1+count*deltaT;dT=DeltaT(T);var d=D-input.tz/24;LST0=getLST0(d,T+dT,long,-input.tz*60);txt="<tr> <td>"+dateString+"</td>";csvdata+=dateString+", ";for(i=0;i<25;i++){parray=planetPos(T+i/876600+dT,calculate);ra[i]=parray[2].ra;dec[i]=parray[2].dec}tt=getTransitTime(LST0,lat,ra,dec,false);alt=-.01454441043328608;trs=getRiseSet(alt,LST0,lat,ra,dec);if(trs.rise=="above"){txt+="<td>circumpolar</td> <td>";txt+=tt.t+" ("+tt.alt+")</td> <td>";txt+="circumpolar</td> ";csvdata+="circumpolar, "+tt.t+" ("+tt.alt+"), ";csvdata+="circumpolar, "}else if(trs.rise=="below"){txt+="<td>invisible</td> <td>";txt+=tt.t+" ("+tt.alt+")</td> <td>";txt+="invisible</td> ";csvdata+="invisible, "+tt.t+" ("+tt.alt+"), ";csvdata+="invisible, "}else{txt+="<td>"+trs.rise+" ("+trs.azRise+")</td> <td>";txt+=tt.t+" ("+tt.alt+")</td> <td>";txt+=trs.set+" ("+trs.azSet+")</td> ";csvdata+=trs.rise+" ("+trs.azRise+"), ";csvdata+=tt.t+" ("+tt.alt+"), ";csvdata+=trs.set+" ("+trs.azSet+"), "}alt=-.1047197551196598;trs=getRiseSet(alt,LST0,lat,ra,dec);if(trs.rise=="above"){txt+="<td>above -6&deg;</td> ";csvdata+="above -6 degrees, above -6 degrees, "}else if(trs.rise=="below"){txt+="<td>below -6&deg;</td> ";csvdata+="below -6 degrees, below -6 degrees, "}else{txt+="<td>"+trs.rise+", "+trs.set+"</td> ";csvdata+=trs.rise+", "+trs.set+", "}alt=-.2094395102393196;trs=getRiseSet(alt,LST0,lat,ra,dec);if(trs.rise=="above"){txt+="<td>above -12&deg;</td> ";csvdata+="above -12 degrees, above -12 degrees, "}else if(trs.rise=="below"){txt+="<td>below -12&deg;</td> ";csvdata+="below -12 degrees, below -12 degrees, "}else{txt+="<td>"+trs.rise+", "+trs.set+"</td> ";csvdata+=trs.rise+", "+trs.set+", "}alt=-.3141592653589793;trs=getRiseSet(alt,LST0,lat,ra,dec);if(trs.rise=="above"){txt+="<td>above -18&deg;</td>";csvdata+="above -18 degrees, above -18 degrees\n"}else if(trs.rise=="below"){txt+="<td>below -18&deg;</td>";csvdata+="below -18 degrees, below -18 degrees\n"}else{txt+="<td>"+trs.rise+", "+trs.set+"</td>";csvdata+=trs.rise+", "+trs.set+"\n"}txt+=" </tr>";count++;if(count<=max_table){$(outid).append(txt)}if(count==max){break}}$(outid).append("</table>");break;case"Moon":txt="<p>In the table below, the angles beside the rise and set times are the azimuths of the Moon at the rise and set times. Azimuth is measured from north and turning positive towards the east. The angle and direction beside the upper transit time is the altitute and direction of the Moon's center at transit. Atmospheric refraction is added when the altitude is above -1&deg;. Illumination gives the fraction of the Moon illuminated. Elongation is the angular distance between the Moon and the Sun. Illumination, apparent magnitude and elongation are the values at 12:00 in the given time zone.</p>";$(outid).append(txt);txt='<p><button onclick="download_csv(csvdata,'+"'Moon.csv')"+'">Download csv file</button></p>';$(outid).append(txt);$(outid).append("<table>");txt="<tr><th>Date</th> <th>Rise</th> <th>Transit</th> <th>Set</th> <th>Illum.</th> <th>Mag.</th> <th>Elong.</th> <th>Phase</th> </tr>";$(outid).append(txt);csvdata="Date, Rise, Transit, Set, Illuminated, Magnitude, Elongation, Phase\n";alt=.002327105669325773;for(D=input.D1;D<=input.D2;D+=input.deltaD){dateString=CalDat(D).dateString;T=T1+count*deltaT;dT=DeltaT(T);var d=D-input.tz/24;LST0=getLST0(d,T+dT,long,-input.tz*60);txt="<tr> <td>"+dateString+"</td>";csvdata+=dateString+", ";var lam12,Dmoon;for(i=0;i<25;i++){var moon=MediumMoon(T+dT+i/24/36525);ra[i]=moon.ra;dec[i]=moon.dec;if(i==12){lam12=moon.lam2000;Dmoon=moon.rGeo}}tt=getTransitTime(LST0,lat,ra,dec,true);trs=getRiseSet(alt,LST0,lat,ra,dec);if(trs.rise=="above"){txt+="<td>circumpolar</td> <td>";txt+=tt.t+" ("+tt.alt+")</td> <td>";txt+="circumpolar</td> ";csvdata+="circumpolar, "+tt.t+" ("+tt.alt+"), ";csvdata+="circumpolar, "}else if(trs.rise=="below"){txt+="<td>invisible</td> <td>";txt+=tt.t+" ("+tt.alt+")</td> <td>";txt+="invisible</td> ";csvdata+="invisible, "+tt.t+" ("+tt.alt+"), ";csvdata+="invisible, "}else{txt+="<td>"+trs.rise+" ("+trs.azRise+")</td> <td>";txt+=tt.t+" ("+tt.alt+")</td> <td>";txt+=trs.set+" ("+trs.azSet+")</td> ";csvdata+=trs.rise+" ("+trs.azRise+"), ";csvdata+=tt.t+" ("+tt.alt+"), ";csvdata+=trs.set+" ("+trs.azSet+"), "}calculate[2]=true;var sun=planetPos(T+dT+.5/36525,calculate)[2];var raSun=sun.ra,decSun=sun.dec,Dsun=sun.rGeo;var raMoon=ra[12],decMoon=dec[12];var illumPhase=moonIlluminated(sun.ra,sun.dec,ra[12],dec[12],sun.lam2000,lam12,Dmoon,Dsun);var illum=illumPhase.illuminated.toFixed(2);var phase=illumPhase.phase;var mag=illumPhase.mag.toFixed(1);txt+="<td>"+illum+"</td>";csvdata+=illum+", ";txt+="<td>"+mag+"</td>";csvdata+=mag+", ";txt+="<td>"+illumPhase.elongTxt+"</td>";csvdata+=illumPhase.elongTxt+", ";txt+="<td>"+phase+"</td> </tr>";csvdata+=phase+"\n";count++;if(count<=max_table){$(outid).append(txt)}if(count==max){break}}$(outid).append("</table>");break;case"Mercury":case"Venus":case"Mars":case"Jupiter":case"Saturn":case"Uranus":case"Neptune":var pindex={Mercury:0,Venus:1,Mars:3,Jupiter:4,Saturn:5,Uranus:6,Neptune:7};var ind=pindex[input.obj];calculate[2]=true;calculate[ind]=true;txt="<p>In the table below, the angles beside the rise and set times are the azimuths of "+input.obj;txt+=" at the rise and set times. Azimuth is measured from north and turning positive towards the east. The angle and direction beside the upper transit time is the altitute and direction of "+input.obj;txt+=" at transit. Atmospheric refraction is added when the altitude is above -1&deg;. Elongation is the angular distance between "+input.obj+" and the Sun. Elongation and magnitude are given at 12:00 in the given time zone.</p>";$(outid).append(txt);txt='<p><button onclick="download_csv(csvdata,'+"'"+input.obj+".csv')"+'">Download csv file</button></p>';$(outid).append(txt);$(outid).append("<table>");txt="<tr><th>Date</th> <th>Rise (Azi)</th> <th>Transit (Alt)</th> <th>Set (Azi)</th> <th>Elong.</th> <th>Illum.</th> <th>Mag.</th></tr>";$(outid).append(txt);csvdata="Date, Rise (Azimuth), Transit (Altitude), Set (Azimuth), Elongation, Illuminated, Magnitude\n";alt=-.009890199094634533;for(D=input.D1;D<=input.D2;D+=input.deltaD){dateString=CalDat(D).dateString;T=T1+count*deltaT;dT=DeltaT(T);var d=D-input.tz/24;LST0=getLST0(d,T+dT,long,-input.tz*60);txt="<tr> <td>"+dateString+"</td> ";csvdata+=dateString+", ";var sun,planet;for(i=0;i<25;i++){parray=planetPos(T+i/876600+dT,calculate);ra[i]=parray[ind].ra;dec[i]=parray[ind].dec;if(i==12){sun=parray[2];planet=parray[ind]}}tt=getTransitTime(LST0,lat,ra,dec,false);trs=getRiseSet(alt,LST0,lat,ra,dec);var Rise=trs.rise+" ("+trs.azRise+")";var Set=trs.set+" ("+trs.azSet+")";if(trs.rise=="above"){Rise="circumpolar";Set="circumpolar"}else if(trs.rise=="below"){Rise="invisible";Set="invisible"}var elongIllum=elongationPhase(planet,sun);var Elong=elongIllum.elongation;var illum=elongIllum.illuminated;var magPara={object:input.obj,i:elongIllum.phaseAng,rHelio:planet.rHelio,rGeo:planet.rGeo,T:T+.5/36525+dT,planet:planet,sun:sun};var mag=planetMag(magPara).toFixed(1);txt+="<td>"+Rise+"</td> <td>";txt+=tt.t+" ("+tt.alt+")</td> <td>";txt+=Set+"</td> <td>"+Elong+"</td> <td>"+illum+"</td> <td>";txt+=mag+"</td> </tr>";csvdata+=Rise+", "+tt.t+" ("+tt.alt+"), ";csvdata+=Set+", "+Elong+", "+illum+", "+mag+"\n";count++;if(count<=max_table){$(outid).append(txt)}if(count==max){break}}break;case"Star":txt="<p>Note that the rise, set and upper transit times of a star are 3 minutes and 56 seconds earlier than those in the previous day. The only long-term changes are caused by precession and the star's proper motion, which occurs on a very long time scale.</p>";$(outid).append(txt);txt="<p>In the table below, the angles beside the rise time is the azimuth of the star at the rise time. Azimuth is measured from north and turning positive towards the east. For stars, the azimuth at the set time is always equal to the negative of the azimuth at the rise time and the azimuth is the same every day. The angle and direction beside the upper transit time is the altitute and direction of the star at transit, which is also the same every day. Atmospheric refraction is added when the altitude is above -1&deg;.</p>";$(outid).append(txt);var raStar=input.ra*Math.PI/12;var decStar=input.dec*deg_to_rad;var Tepoch=(input.epoch-2e3)*.01;txt='<p><button onclick="download_csv(csvdata,'+"'star.csv')"+'">Download csv file</button></p>';$(outid).append(txt);$(outid).append("<table>");txt="<tr><th>Date</th> <th>Rise</th> <th>Transit</th> <th>Set</th> </tr>";$(outid).append(txt);csvdata="Date, Rise, Transit, Set\n";alt=-.009890199094634533;for(D=input.D1;D<=input.D2;D+=input.deltaD){dateString=CalDat(D).dateString;T=T1+count*deltaT;dT=DeltaT(T);var d=D-input.tz/24;LST0=getLST0(d,T+dT,long,-input.tz*60);txt="<tr> <td>"+dateString+"</td> ";csvdata+=dateString+", ";if(Math.abs(T-Tepoch)>.1){var p=precession_matrix(Tepoch,T-Tepoch);var precessed=precessed_ra_dec(raStar,decStar,p);raStar=precessed.ra;decStar=precessed.dec;Tepoch=T}var t=riseSetStar(LST0,alt,lat,raStar,decStar);var Rise=t.rise+" ("+t.azRise+")";var Set=t.set;if(t.rise=="above"){Rise="circumpolar";Set="circumpolar"}else if(t.rise=="below"){Rise="invisible";Set="invisible"}txt+="<td>"+Rise+"</td> <td>";txt+=t.transit+" ("+t.altTransit+")</td> <td>";txt+=Set+"</td></tr>";csvdata+=Rise+", "+t.transit+" ("+t.altTransit+"), ";csvdata+=Set+"\n";count++;if(count<=max_table){$(outid).append(txt)}if(count==max){break}}}}function Quad(x,ym,y0,yp){var a=.5*(yp+ym)-y0;var b=.5*(yp-ym);var c=y0;return(a*x+b)*x+c}function QuadRootSearch(ym,y0,yp){var a=.5*(yp+ym)-y0;var b=.5*(yp-ym);var c=y0;var xe,ye,root1,root2,nroot;if(Math.abs(a)<1e-6){if(b>0){xe=1}else{xe=-1}if(b==0){xe=0;root1=Infinity;nroot=0}else{root1=-c/b;nroot=1;if(Math.abs(root1)>1){nroot=0}}ye=b*xe+c;return{xe:xe,ye:ye,nroot:nroot,root1:root1,root2:root1}}xe=-.5*b/a;ye=(a*xe+b)*xe+c;var dis=b*b-4*a*c;if(dis>=0){if(Math.abs(a*c)>.001*dis){var dx=.5*Math.sqrt(dis)/Math.abs(a);root1=xe-dx;root2=xe+dx}else{var tmp=b+Math.sqrt(dis);if(b<0){tmp=b-Math.sqrt(dis)}var r1=-2*c/tmp;var r2=-.5*tmp/a;root1=Math.min(r1,r2);root2=Math.max(r1,r2)}nroot=0;if(Math.abs(root1)<=1){nroot++}if(Math.abs(root2)<=1){nroot++}if(nroot==1){root1=Math.abs(root1)<=1?root1:root2}}else{nroot=0;root1=Infinity;root2=Infinity}return{xe:xe,ye:ye,nroot:nroot,root1:root1,root2:root2}}function getTransitTime(LST0,lat,ra,dec,moonParallax){var twoPI=2*Math.PI;var HA=[];var i;for(i=0;i<25;i++){HA[i]=LST0-ra[i]+.262516170790829*i;HA[i]-=twoPI*Math.floor((HA[i]+Math.PI)/twoPI)}var j;for(i=0;i<24;i++){if(HA[i]*HA[i+1]<0&&Math.abs(HA[i]-HA[i+1])<1){j=i;break}}if(j===undefined){return{t:"-",alt:"-"}}if(j==0){j=1}var result=QuadRootSearch(HA[j-1],HA[j],HA[j+1]);if(result.nroot!=1){return{t:"NA",alt:"NA"}}var t=convertHoursToHourMinute(j+result.root1);var decTransit=Quad(result.root1,dec[j-1],dec[j],dec[j+1]);var alt=.5*Math.PI-Math.abs(lat-decTransit);if(moonParallax){var Rearth=6371,Dmoon=384400;alt-=Rearth*Math.cos(alt)/(Dmoon-Rearth*Math.sin(alt))}if(alt>-.0175){alt+=atmosphericRefraction(alt,101,286)}alt*=180/Math.PI;alt=alt.toFixed(1)+"&deg;";if(lat<decTransit){alt+=" N"}else{alt+=" S"}return{t:t,alt:alt}}function getRiseSet(alt0,LST0,lat,ra,dec){var i;var cosLat=Math.cos(lat),sinLat=Math.sin(lat);var sinAlt0=Math.sin(alt0);var dSinAlt=[];var HA;for(i=0;i<25;i++){HA=LST0-ra[i]+.262516170790829*i;dSinAlt[i]=sinLat*Math.sin(dec[i])+cosLat*Math.cos(dec[i])*Math.cos(HA)-sinAlt0}var foundRise=false,foundSet=false;var iRise,iSet,tRise,tSet;for(i=1;i<25;i+=2){var result=QuadRootSearch(dSinAlt[i-1],dSinAlt[i],dSinAlt[i+1]);if(result.nroot>0){if(result.nroot==1){if(dSinAlt[i-1]<0){iRise=i;foundRise=true;tRise=i+result.root1}else{iSet=i;foundSet=true;tSet=i+result.root1}}else{iRise=i;iSet=i;foundRise=true;foundSet=true;if(result.ye>=0){tRise=i+result.root1;tSet=i+result.root2}else{tSet=i+result.root1;tRise=i+result.root2}}}if(foundRise&&foundSet){break}}var getAz=function(j,dj){var cosDec,sinDec,sA,cA,y0,yp,ym,x,y,raI,decI;y0=Math.sin(ra[j]);yp=Math.sin(ra[j+1]);ym=Math.sin(ra[j-1]);y=Quad(dj,ym,y0,yp);y0=Math.cos(ra[j]);yp=Math.cos(ra[j+1]);ym=Math.cos(ra[j-1]);x=Quad(dj,ym,y0,yp);raI=Math.atan2(y,x);decI=Quad(dj,dec[j-1],dec[j],dec[j+1]);HA=LST0-raI+.262516170790829*(j+dj);cosDec=Math.cos(decI),sinDec=Math.sin(decI);sA=cosDec*Math.sin(HA);cA=cosDec*Math.cos(HA)*sinLat-sinDec*cosLat;var az=180+180/Math.PI*Math.atan2(sA,cA);if(az>180){az-=360}return Math.round(az).toString()+"&deg;"};var azRise="-",azSet="-";var Rise="-",Set="-";if(foundRise){Rise=convertHoursToHourMinute(tRise);azRise=getAz(iRise,tRise-iRise)}if(foundSet){Set=convertHoursToHourMinute(tSet);azSet=getAz(iSet,tSet-iSet)}if(!foundRise&&!foundSet){if(dSinAlt[0]>0){Rise="above";Set="above"}else{Rise="below";Set="below"}}return{rise:Rise,set:Set,azRise:azRise,azSet:azSet}}function convertHoursToHourMinute(hours){var hr=hours+.5/60;var h=Math.floor(hr);var m=Math.floor((hr-h)*60).toString();h=h.toString();if(h.length<2){h="0"+h}if(m.length<2){m="0"+m}return h+":"+m}function riseSetStar(LST0,alt,lat,ra,dec){var halfPI=.5*Math.PI;var rad_to_deg=180/Math.PI;var altMax=halfPI-Math.abs(lat-dec);var altMin=-halfPI+Math.abs(lat+dec);var dHA=(ra-LST0)*12/Math.PI;dHA=dHA-24*Math.floor(dHA/24);var t=dHA/1.0027378119113546;var tTransit=convertHoursToHourMinute(t);var azTransit="";if(lat<dec){azTransit="N"}else if(lat>dec){azTransit="S"}var altTransit=altMax;if(altTransit>-.0175){altTransit+=atmosphericRefraction(altMax,101,286)}altTransit*=rad_to_deg;altTransit=altTransit.toFixed(1)+"&deg; "+azTransit;var tRise,tSet,azRise;if(alt<altMin){tRise="above";tSet="above";azRise="-"}else if(alt>altMax){tRise="below";tSet="below";azRise="-"}else{var sinRa=Math.sin(ra),cosRa=Math.cos(ra);var sinDec=Math.sin(dec),cosDec=Math.cos(dec);var sinLat=Math.sin(lat),cosLat=Math.cos(lat);var HA=Math.acos((Math.sin(alt)-sinLat*sinDec)/(cosLat*cosDec));var LST=HA+ra;t=(LST-LST0)*12/Math.PI;t=t-24*Math.floor(t/24);tSet=convertHoursToHourMinute(t/1.0027378119113546);LST=ra-HA;t=(LST-LST0)*12/Math.PI;t=t-24*Math.floor(t/24);tRise=convertHoursToHourMinute(t/1.0027378119113546);azRise=Math.atan2(-Math.sin(HA)*cosDec,cosDec*Math.cos(HA)*sinLat-sinDec*cosLat);azRise=Math.round(azRise*rad_to_deg+180).toString()+"&deg;"}return{rise:tRise,set:tSet,azRise:azRise,transit:tTransit,altTransit:altTransit}}function download_csv(data,filename){var hiddenElement=window.document.createElement("a");hiddenElement.href=window.URL.createObjectURL(new Blob([data],{type:"text/csv"}));hiddenElement.download=filename;document.body.appendChild(hiddenElement);hiddenElement.click();document.body.removeChild(hiddenElement)}